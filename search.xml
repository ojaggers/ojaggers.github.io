<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[概率论与数理统计]]></title>
    <url>%2F2019%2F03%2F27%2F%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[描述性统计学统计学的分类描述统计学：使用特定的数字或图表来体现数据的集中程度和离散程度。例：每次考试算的平均分，最高分，各个分段的人数分布等，也是属于描述统计学的范围。 推断统计学：根据样本数据推断总体数据特征。例：产品质量检查，一般采用抽检，根据所抽样本的质量合格率作为总体的质量合格率的一个估计。 常用的统计学数值均值：算术平均数，描述平均水平， 充分利用所有数据，适用性强；但是容易受到极端值的影响 中位数：将数据从大小排列后位于正中间的数，描述中等水平 不受极端值影响；但是缺乏敏感性 众数：数据中出现最多的数，描述一般水平 当数据具有明显的集中趋势时，代表性好；不受极端值影响；但是缺乏唯一性：可能有一个，可能有两个，可能一个都没有 方差：方差用来计算每一个变量（观察值）与总体均数之间的差异。为避免出现离均差总和为零，离均差平方和受样本含量的影响，统计学采用平均离均差平方和来描述变量的变异程度。注意：总体方差和样本方差是不一样的，样本方差是除于N-1 标准差：方差的平方根，可以避免因单位平方而引起的度量问题 常见的统计图表直方图：分为频数直方图和频率直方图，前者以频数为纵坐标，后者以频率为纵坐标，频率=频数/总数 箱线图：下四分位数：Q1，将所有数据按照从小到大的顺序排序排在第25%位置的数字；上四分位数：Q3，将所有数据按照从小到大的顺序排序排在第75%位置的数字；四分位距：IQR，等于Q3-Q1，衡量数据离散程度的一个统计量；异常点：小于Q1－1.5IQR或大于Q3+1.5IQR的值；上边缘：除异常点以外的数据中的最大值；下边缘：除异常点以外的数据中的最小值 茎叶图：可以在保留全部数据信息的情冴下，直观地显示出数据的分布情冴，若将茎叶图旋转90度，则可以得到一个类似于直方图的图。 先将数据分为茎和叶两部分，这里的茎是指十位上的数字，叶是指个位上的数字 然后将茎部分（十位）从小到大，从上到下写出来 最后相对于各自的茎，将同一茎（十位）的叶子（个位）从小到大，从左往右写出来 线图：以时间为横坐标，变量为纵坐标，反映变量随时间推移的变化趋势 柱形图：显示一段时间内的数据变化或显示各项之间的比较情冴 柱形图和直方图的区别：从横坐标看，直方图是同一个变量的分组划分，而柱形图则是不同的组别；从作用上看，直方图用于显示一组数据的分布情冴，而柱形图则是用于比较不同组别的数据差异 饼图：根据各项所占百分比决定在饼图中的扇形面积，形象地看出各个项目所占的比例大小 概率的基本概念与古典模型试验：对某种自然现象作一次观察戒进行一次科学试验 随机试验：具有3个特点。1）可以在相同的条件下重复进行；2）试验的可能结果不止一个，但在试验前可以知道所有可能结果；3）试验前丌能确定哪个结果会出现 样本空间：对于随机试验E，E的所有可能结果组成的集合称为E的样本空间，记为S。其中，S中的元素，即E的每个可能结果，称为样本点。 事件：我们称试验E的样本空间Ｓ的某个子集为Ｅ的随机事件，简称事件。一般用大写字母Ａ，Ｂ，Ｃ…表示 基本事件：由一个样本点组成的单点集 事件发生：在每次试验中，当事件中的某个样本点出现时，称这个事件发生 必然事件：在每个试验中一定会发生的事件 不可能事件：在每个试验中一定不会发生的事件,用∅表示 事件关系：事件关系分为包含，和事件，积事件，差事件，互斥事件，逆事件 事件运算定律： 交换律： 结合律： 分配律： 德摩根率： 频率，频数：在相同条件下，重复n次试验，事件A发生的次数Na称为A发生的频数，Na/N称为事件A发生的频率 概率：当试验的重复次数n逐渐增大时，事件A发生的频率会逐渐稳定于某个常数p，这个p就是事件A发生的概率，用于表示在一次试验中，事件A发生的可能性大小，记为事件A的概率P(A) 概率需要满足3个条件： 1）非负性：P(A) &gt;= 0; 2) 规范性：对于必然事件S，P(S) = 1; 3) 可列可加性：对于两两互不相容的事件A1,A2,A3….，即Ai·Aj = ∅，i != j，i,j=1,2,….,有 概率的几个性质： 1）P(∅)=0 即不可能事件发生的概率为0 2）有限可加性：对于两两互不相容的事件A1,A2,A3,…An，即Ai·Aj=∅，i！=j，i,j=1,2,…n，有 3）对于A,B两个事件，若，则 4) 对于任一事件A， 5) 对于任一事件A，有 6) 对于A,B两个事件，有，这称为加法公式。推广： 古典概型：对于试验E，若满足：1）试验的样本空间只包含有限个元素 2）试验中每个基本事件发生的可能性相同，即每个基本事件发生的概率相等。则称这样的试验E为古典概型，也叫等可能概型。如抛硬币，抛骰子。 对于事件A，若A包含k个基本事件，即，则有 排列组合： 排列：从n个丌同元素中,任取m个元素,按照一定的顺序排成一列,叫做从n个丌同元素中取出m个元素的一个排列.不顺序有关 组合：从n个丌同元素中,任取m个元素,并成一组,叫做从n个丌同元素中取出m个元素的一个组吅.不顺序无关 几何概型：对于试验E，若满足：1）试验的样本空间包含无限个元素 2）试验中每个基本事件发生的可能性相同，即每个基本事件发生的概率相等。则称这样的试验E为几何概型。对于几何概型，试验A，有： 条件概率与贝叶斯公式，独立性条件概率： 已知某个事件A发生的条件下，另一个事件B发生的概率称为条件概率，记为为P(B|A)，其中P(B|A)不P(A)、P(B)的关系如下： 乘法定理： 全概率公式： 事件面试成功=到A公司面试并成功U到B公司面试并成功U到C公司面试并成功 即，其中B1,B2,B3为互斥事件，故 划分： 设S为试验E的样本空间，B1,B2…Bn为E的一组事件，若 1) 2) 则称B1,B2,…Bn是样本空间S的一个划分 贝叶斯公式： 设试验E的样本空间为S，A为E的一个事件，B1,B2,…Bn是S的一个划分，且P(A)&gt;0,P(Bi)&gt;0 (i=1,2,…,n)，则 公式比较： 乘法公式、全概率公式不贝叶斯公式 1 乘法公式是求“几个事件同时发生”的概率； 2 全概率公式是求“最后结果”的概率； 3 贝叶斯公式是已知“最后结果”，求“某个事件”的概率. 先验概率不后验概率 1 P(Bj|A)是在事件A发生的条件下, 某个事件Bj发生的概率, 称为“后验概率”; 2 Bayes公式又称为“后验概率公式”戒“逆概公式”; 3 称P(Bj) 为“先验概率”. 独立性： 设A，B为随机事件，若同时发生的概率等于各自发生的概率的乘积，则A，B相互独立。一般地，设A1，A2，…，An是n(n≥2) 个事件，如果对于其中任意2个，任意3个，…，任意n个事件的积事件的概率，都等于各事件概率之积，则称A1，A2，…，An相互独立。 设A1，A2，…，An是n个事件，若其中任意两个事件之间均相互独立，则称A1，A2，…，An两两独立。 多个事件相互独立≠多个事件两两独立 2个性质： 定理1 设A,B是两事件。且P(A)&gt;0，若A,B相互独立。则P(A|B)=P(A),反之亦然。 定理2 若事件A与B相互独立，则A与非B,非A与B,非A与非B也相互独立。 相互独立事件不互斥事件、对立事件辨析： 相互独立事件：风马牛不相及。两个事件没有一点关系。例如，A、Ｂ分别表示甲、乙两人患感冒，丏甲乙两人的活动范围相距甚进，那么甲是否患感冒跟乙没什么关系，所以可以认为A、B独立。 互斥事件：要么只有其中一个事件发生，要么两个事件都不发生。在某次抽奖活动中，一等奖只有一个名额，A={甲中一等奖}，B={乙中一等奖}。那么A、B互为互斥事件，实际情况可能是甲中一等奖，可能是乙中一等奖，当然，更有可能甲乙都不中奖。 对立事件：两个只能活一个，不是你死就是我亡。跟互斥事件相比，对立事件必然会有一个事件发生。例如在上述的抽奖活动中，C={甲不中一等奖}，那么Ａ不Ｃ是对立事件。 互斥事件与对立事件都不是相互独立事件！ 随机变量及其分布多为随机变量及其分布随机变量的期望，方差与协方差大数定律、中心极限定律与抽样分布点估计与区间估计参数估计应用时刻]]></content>
      <categories>
        <category>数学理论</category>
      </categories>
      <tags>
        <tag>统计学</tag>
        <tag>概率</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人生苦短，我用Git]]></title>
    <url>%2F2019%2F03%2F07%2F%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Git%2F</url>
    <content type="text"><![CDATA[人生苦短，我用GitGit背景介绍Linux是一个开源的系统，深受程序员喜爱，在开源社区中世界各地的大佬都可以进一步完善和优化Linux，最后由Linus大神统一归纳整理。随着社区成员的增加，工作量逐渐增加，Linus累觉不爱，使用了一个商业集中式版本控制系统BitKeeper进行管理。然而极客自然有极客的乐趣，社区的一个哥们试图破解这个商业软件，然后就被发现了，软件公司表示要收回它们的使用权。Linus一怒之下，哼，花了两周，用C写了一个分布式管理系统，对，就是Git。 Git的主要作用就是记录文档的每一次修改过程，更好的存储每一个版本，替代以往的每一次修改的文档都存储为一个文件，最后生成一堆文件的困扰。对，你想的没错，在改论文的时候一般得改个十遍八遍，最后自己都懵了有木有，如果使用Git，一切尽在掌握。然而，由于word是二进制文件，因此，Git处理不了.doc文件，只能处理文本文件，txt,html,md等等等等，不一而足。 Git安装：下载Git，然后默认安装即可，从开始菜单找到Git Bash，打开，设置用户名和地址。12git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;email@example.com&quot; 由于git config的–global参数，因此本电脑所有仓库将使用这个用户名和地址，当然，你也可以对仓库设置不同的用户名和地址。 创建版本库：版本库就是仓库，也就是一个目录，目录中的文件都可以被Git管理起来。 首先在任意地方创建一个空目录，（注意；以下均在Git Bash中执行而不是cmd）mkdir learngit然后通过git init将该目录初始化为Git可管理的仓库，此时在当前目录下会多出一个.git的目录，它是用来跟踪管理版本库的。 如何将文件添加到版本库 例如编写一个test.txt： 12Git is a version control system.Git is free software. 然后将这个文件放在learngit文件夹下，放在其他地方Git就无能为力了，然后我们开始将文件添加进去。 第一步：添加文件到仓库 git add test.txt 第二步：提交文件到仓库 git commit -m &quot;wrote a test file&quot; Git文件的版本管理现在修改test.txt文件：12Git is a distributed version control system.Git is free software. 然后运行git status查看结果。结果提示表明test.txt文件被修改过了，但还没有准备提交的修改。 然后我们可以通过git diff test.file查看修改的地方。 接下来就可以将它提交到仓库了。12git add test.txtgit commit -m &quot;add distributed&quot; 此时再来查看仓库的当前状态。123$ git statusOn branch masternothing to commit, working tree clean 表明我们当前没有需要提交的修改，而且工作目录是干净的。 回到过去再次修改test.txt。12Git is a distributed version control system.Git is free software distributed under the GPL. 然后提交到仓库。1234$ git add test.txt$ git commit -m &quot;append GPL&quot;[master 3b2047b] append GPL 1 file changed, 1 insertion(+), 1 deletion(-) 到目前为止我们已经提交了3次，也就是存在3个不同的版本。可以通过git log查看。他将显示从最近到最远的提交日志，也可以通过git log --pretty=oneline简化输出结果。注意，每一行的前面的一串数字是commit id，也就是版本号，每次提交一个新版本，Git会自动将她们串成一条时间线。1234$ git log --pretty=oneline3b2047b84f373b1a5de79a84f87c8a0039255e79 (HEAD -&gt; master) append GPL4960c61015466c564c030f527054c15668cda429 add distributedb85c6aaa8843be84cbd621e9928e687c8e317db8 wrote a test file 现在问题来了，如果想将文件回退到上一版本，即add distributrd那个版本，若何作为呢。 在Git中，用HEAD表示当前版本，上一个版本是HEAD^，上上个版本是HEAD^^，可以一直往上回溯，若往上n个版本，你可以HEAD~n。通过日志我们知道当前版本为append GPL，回到上一个版本可以使用git reset命令。12$ git reset --hard HEAD^HEAD is now at 4960c61 add distributed 打开test.txt，可以发现内容确实被还原了，当然，在bash中你也可以cat test.txt直接查看文件内容。按此方法我们还可以继续回退，然而，当我们查看日志时，发现：123456789101112$ git logcommit 4960c61015466c564c030f527054c15668cda429 (HEAD -&gt; master)Author: jagger &lt;ojaggers@163.com&gt;Date: Wed Mar 6 09:21:44 2019 +0800 add distributedcommit b85c6aaa8843be84cbd621e9928e687c8e317db8Author: jagger &lt;ojaggers@163.com&gt;Date: Wed Mar 6 09:11:40 2019 +0800 wrote a test file 是的，只剩2个版本了，最新的append GPL已经没了，经没了，没了，了。是不是有点小小的后悔，莫慌，我们先在bash中找一下那个版本的版本号，3b2047b84f373b1a5de79a84f87c8a0039255e79，然后就可以指定回去了，当然，版本号不需写这么多，写个头几位就行了。12$ git reset --hard 3b204HEAD is now at 3b2047b append GPL 好了，转危为安。此时你打开文件会发现内容变了，打开日志也能看见3条记录了。 当然了，如果你忘了这个版本号呢，bash已经关掉了，找不到记录了，怎么办，莫慌，Git不会让你失望的，Git中git reflog用来记录每一次命令。123456$ git reflog3b2047b (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 3b2044960c61 HEAD@&#123;1&#125;: reset: moving to HEAD^3b2047b (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL4960c61 HEAD@&#123;3&#125;: commit: add distributedb85c6aa HEAD@&#123;4&#125;: commit (initial): wrote a test file 你看，版本号啥的都有吧，Git决不让你失望。 Git的回退速度贼快，原因是Git在内部有个指向当前版本的HEAD指针，内存的机制你懂吧。 工作区与版本库工作区就是你在电脑里能看到的目录，如前面这个learngit文件夹。 版本库就是工作区中的隐藏目录.git。里面存了很多内容，主要包含stage(index)暂存区和自动创建的master分支，指向master的指针是HEAD。前面文件添加的操作可以按下图说明。即git add添加文件，实际上就是把文件修改添加到暂存区；git commit提交修改，实际就是把暂存区的所有内容提交到当前分支，此时，暂存区中就没有任何内容了。简言之，需要提交的文件修改全都放在了暂存区，然后一次性提交暂存区的所有修改。 文件管理的实质是管理修改Git跟踪并管理的是修改，而不是文件。每次修改，如果不用git add到暂存区，就不会加入到commit中。 git diff HEAD -- readme.txt可以查看工作区和版本库里最新版本的区别。 git diff比较工作区和暂存区的区别； git diff --cached比较暂存区和版本库的区别； git diff HEAD -- filename比较工作区和版本库的区别。 如何撤销修改当改乱了工作区的某个文件的内容，想要直接丢弃工作区的修改时，使用git checkout -- file 当改乱了工作区某个文件的内容，还添加到暂存区时，想丢弃修改，分为2步，先git reset HEAD &lt;file&gt;，然后git checkout -- file 对于已经提交的不合适的修改到版本库时，想要撤销本次提交，采用版本回退方式，前提是没有推送到远程库。 如何删除文件删除也是一种修改操作，当你要删除文件的时候，可以rm aa.txt。这时，有2种情况 第一种，确实想完全删除aa.txt，那么执行以下命令，文件就从版本库中删除了。 12git rm aa.txtgit commit -m &quot;remove aa.txt&quot; 第二种，删错了，后悔了，若此时只执行了rm aa.txt，还未提交，可以通过git checkout -- aa.txt来将文件恢复。若删除动作已提交，则无法用checkout恢复，需要git reset --hard commit_id来版本回滚。 远程仓库你可以搭建一个运行Git的服务器，每天24小时开机，这样其他人就可以从这个服务器的仓库中克隆一份到自己的电脑进行工作，同时也可以每个用户将自己的提交推送到服务器仓库里，也可以从服务器仓库中拉取别人的提交。 还有一种方式就是借助GitHub了，它可以提供Git的仓库托管服务。 首先，你需要注册并登陆，然后创建SSH Key，你可以先在Bash中执行cd ~找到主目录，然后cd .ssh看看有没有.ssh目录，如果有，看看有没有id_rsa和id_rsa.pub这2个文件，如果没有，请执行以下命令创建SSH Key: ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 然后一直回车使用它的默认值就可以了，然后你就会在主目录下找到刚说的2个文件。最后进入GitHub，Add New SSH，随意取一个title，在Key中粘贴id_rsa.pub的文本内容即可。 为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。 当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。 添加远程库现在想把前面建在本地的learngit仓库与GitHub同步，如何做呢。 首先，在GitHub上创建一个新的仓库，仓库名就写Learngit，其他保持默认设置，然后Creat就成功创建了一个新的Git仓库，此时该仓库还是空的。 然后我们执行以下命令： git remote add origin https://github.com/yourname/learngit.git，这样就实现了本地和GitHub上的仓库的关联，远程库的名字叫做origin，接下来就是将本地库的所有内容推送到远程库上。 1234567891011$ git push -u origin masterEnumerating objects: 34, done.Counting objects: 100% (34/34), done.Delta compression using up to 8 threadsCompressing objects: 100% (29/29), done.Writing objects: 100% (34/34), 2.63 KiB | 244.00 KiB/s, done.Total 34 (delta 13), reused 0 (delta 0)remote: Resolving deltas: 100% (13/13), done.To https://github.com/yourname/learngit.git * [new branch] master -&gt; masterBranch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;origin&apos;. 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。 此时在GitHub上就可以看到和本地库中一毛一样的内容了，以后就可以通过以下命令将本地master分支的最新修改推送到GitHub了，这便是分布式版本库的优越性了。 当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：123The authenticity of host &apos;github.com (xx.xx.xx.xx)&apos; can&apos;t be established.RSA key fingerprint is xx.xx.xx.xx.xx.Are you sure you want to continue connecting (yes/no)? 这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：Warning: Permanently added ‘github.com’ (RSA) to the list of known hosts.这个警告只会出现一次，后面的操作就不会有任何警告了。 从远程库克隆前面是将本地库关联到远程库，那么如何将远程库拽到本地来呢？ 在GitHub上选择一个远程库，然后克隆即可，譬如，本地没有learngit库，但你想把它弄到本地来修改： git clone origin https://github.com/yourname/learngit.git此时，你的电脑中learngit目录中就会有远程库中哪些文件啦。 分支管理假设你要开发一个新功能，现在你写了一半，如果立刻提交，由于代码未写完，别人不能在你的工作上继续，但如果等全部写完再提交，又可能哪天忘了丢失已完成的进度。分支就可以很好地解决这一问题。你可以创建自己的分支，在分支上进行你的工作，随时提交，知道开发完成后再统一合并到原来的分支上，这样就稳妥啦。 创建切换合并删除分支初始状态，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支和当前分支的提交点。每次提交，master分支都会向前移动一步，这样，随着提交越来越多，master分支的线就越来越长。 现在我们创建了一个新分支如dev，Git就新建了一个指针dev，指向master相同的提交点，再把HEAD指向dev，即表示当前分支在dev上。 从此时起，对工作区的修改和提交只是针对dev分支了，如新提交一次后，它的状态应是如下的。 此时，如果想把dev合并到master分支，只需把master指向dev的当前提交点即可。 合并之后，可以删除dev分支，也就是删除dev指针，此时，我们就只剩master分支了。 具体的命令是怎样的呢？ 查看分支：git branch 创建分支：git branch &lt;name&gt; 切换分支：git checkout &lt;name&gt; 创建+切换分支：git checkout -b &lt;name&gt; 合并某分支到当前分支：git merge &lt;name&gt; 删除分支：git branch -d &lt;name&gt; 合并中的冲突假设现在有一个新分支开发： git checkout -b feature1 然后修改test.txt Creating a new branch is quick AND simple. 然后在feature1分支上提交12$ git add test.txt$ git commit -m &quot;AND simple&quot; 分支此时切换到master1234$ git checkout masterSwitched to branch &apos;master&apos;Your branch is ahead of &apos;origin/master&apos; by 1 commit. (use &quot;git push&quot; to publish your local commits) Git会自动提示当前的master分支比远程的master分支超前1个提交，在master分支上把test.txt修改 Creating a new branch is quick &amp; simple. 然后add，commit提交。 此时master分支和feature1分支各自都分别有新的提交： 这种状况下是没法快速合并的，会发生“冲突”。 1234$ git merge feature1Auto-merging readme.txtCONFLICT (content): Merge conflict in test.txtAutomatic merge failed; fix conflicts and then commit the result. 我们可以通过git status找到冲突的文件。 123456789101112131415$ git statusOn branch masterYour branch is ahead of &apos;origin/master&apos; by 2 commits. (use &quot;git push&quot; to publish your local commits)You have unmerged paths. (fix conflicts and run &quot;git commit&quot;) (use &quot;git merge --abort&quot; to abort the merge)Unmerged paths: (use &quot;git add &lt;file&gt;...&quot; to mark resolution) both modified: test.txtno changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;) 查看test.txt的内容，可以发现Git用不同的符号标记出了不同分支的内容，我们将其修改后再保存提交，此时master和feature1分支的关系如下： 通过git log --graph --pretty=oneline --abbrev-commit可以查看分支的合并情况。最后我们通过执行git branch -d feature1删除feature1分支。 简言之，当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。 如何进行分支管理一般而言，Git合并分支时一般使用Fast forward模式，但该模式下，删除分支后会丢掉分支信息。若要强制禁用该模式，合并时会生成新的commit，这样就可以保存分支信息。 假设我们创建并切换dev分支 12$ git checkout -b devSwitched to a new branch &apos;dev&apos; 然后修改test.txt内容（例如在最后加一句话我就笑笑不说话）后提交。 然后切换回master分支，准备合并，此时禁用Fast forward 1234$ git merge --no-f -m &quot;merge with no-ff&quot; devMerge made by the &apos;recursive&apos; strategy. test.txt | 1 + 1 file changed, 1 insertion(+) 合并后用git log --graph --pretty=oneline --abbrev-commit查看分支历史可知，这种模式下的merge结果如下： 分支策略在实际开发中，我们应该按照几个基本原则进行分支管理：首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。所以，团队合作的分支看起来就像这样： Bug分支假设工作过程中突然接到任务要修一个Bug，然而手头的工作还没完成，没法提交，怎么办？ Git提供了一个stash功能，执行git stash可以把当前工作现场储藏起来，等以后恢复现场后继续工作。现在再git status会发现工作区是干净的。 好的，工作区是干净的那么就可以创建分支修Bug了，首先确定在哪个分支上修Bug，假设是在master分支，那么先创建一个临时分支。 1234567$ git checkout masterSwitched to branch &apos;master&apos;Your branch is ahead of &apos;origin/master&apos; by 6 commits. (use &quot;git push&quot; to publish your local commits)$ git checkout -b issue-101Switched to a new branch &apos;issue-101&apos; 然后修复Bug，然后保存并提交。 修复完成后，切换到master分支，完成合并，最后删除issue-101分支。 接下来该回到dev分支继续刚才的工作，git checkout dev，git status发现工作区是干净的，那么工作现场在哪呢，执行git stash list，发现Git把stash内容存在某个地方了，怎么恢复呢。此处有2种方法。 一是执行git stash apply恢复，这样恢复后，stash内容并不删除，需要执行git stash drop来删除 二是执行git stash pop，可以在恢复的同时把stash内容也删除，此时执行git stash list就看不到stash内容了。 Feature分支假设现在要开发代号Vulcan的新功能，但你不想因为这一个实验性质的代码搞乱主分支，所以你最好每添加一个新功能，就新建一个feature分支，在分支上开发，完成后再合并，最后，删除该分支。（当然了，只是举个例子，一般还是要保留的，万一以后又要改这个功能呢，谁知道呢） 现在，你准备开发这个功能了。经过创建切换分支，程序开发，添加提交操作后，切换到dev分支准备合并，然后删除就好了。 然而，如果合并之前，有通知该功能取消，如何销毁呢： 123$ git branch -d feature-vulcanerror: The branch &apos;feature-vulcan&apos; is not fully merged.If you are sure you want to delete it, run &apos;git branch -D feature-vulcan&apos;. 是的，由于feature-vulcan分支还没有合并，如果删除，将丢失修改，因此销毁失败。如果要强行删除，你应该： 12$ git branch -D feature-vulcanDeleted branch feature-vulcan (was 287773e). 多人协作模式 多人协作的工作模式通常是这样： 首先，可以试图用git push origin &lt;branch-name&gt;推送自己的修改； 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并； 如果合并有冲突，则解决冲突，并在本地提交； 没有冲突或者解决掉冲突后，再用git push origin &lt;branch-name&gt;推送就能成功！ 如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;。 这就是多人协作的工作模式，一旦熟悉了，就非常简单。 小结 查看远程库信息，使用git remote -v； 本地新建的分支如果不推送到远程，对其他人就是不可见的； 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交； 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致； 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name； 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。 Rebase变基 rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。 标签管理Git的标签是版本库的快照，其实就是指向某个commit的指针，和分支相似，但分支可以移动，而标签不能。 tag与commit的关系，就类似与域名与IP地址的关系， 创建标签命令git tag &lt;tagname&gt;用于新建一个标签，默认为HEAD，也可以指定一个commit id； 命令git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;可以指定标签信息； 命令git tag可以查看所有标签。 操作标签命令git push origin &lt;tagname&gt;可以推送一个本地标签； 命令git push origin --tags可以推送全部未推送过的本地标签； 命令git tag -d &lt;tagname&gt;可以删除一个本地标签； 命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签。 自定义Git忽略特殊文件忽略某些文件时，需要编写.gitignore； .gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！ 配置别名将checkout,commit,branch简写成co,ci,br，可以执行： 123$ git config --global alias.co checkout$ git config --global alias.ci commit$ git config --global alias.br branch 如何搭建Git服务器搭建Git服务器需要准备一台运行Linux的机器。然后： 第一步，安装git： $ sudo apt-get install git 第二步，创建一个git用户，用来运行git服务： $ sudo adduser git 第三步，创建证书登录： 收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。 第四步，初始化Git仓库： 先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令： $ sudo git init --bare sample.git Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git： $ sudo chown -R git:git sample.git 第五步，禁用shell登录： 出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行： git:x:1001:1001:,,,:/home/git:/bin/bash 改为： git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell 这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。 第六步，克隆远程仓库： 现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行： 123$ git clone git@server:/srv/sample.gitCloning into &apos;sample&apos;...warning: You appear to have cloned an empty repository.]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript笔记]]></title>
    <url>%2F2019%2F02%2F28%2FJavaScript%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[JavaScript与Java的关系仅是语法相似，无其他任何关系，主要用于网页动态设计和交互。其国际标准为ECMAScript，最新标准ES6. 入门篇快速入门 JavaScript代码可以直接放在网页的任何地方，但一般将其放在&lt;head&gt;中。即&lt;html&gt;&lt;head&gt;&lt;script&gt;...&lt;/script&gt;&lt;/head&gt;&lt;body&gt;...&lt;/body&gt;&lt;/html&gt;这种结构。 也可将JavaScript代码放在单独的.js文件中，然后通过&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;引入该文件。 可以在同一个页面引用多个.js文件，也可以在页面中多次编写&lt;script&gt;js代码...&lt;/script&gt;，浏览器按顺序执行。 编写工具：Visual Studio Code/Sublime Text/Notepad++ 调试方法：Chrome的console 基本语法 语法与Java类似，每个语句以;结束，语句块用{...}，注意;不是强制要求，浏览器中的JavaScript引擎会自动在语句结尾补齐;，建议自己加; {...}内的语句具有缩进，有助于理解，此外{...}可以嵌套形成层级结构，但过多的层级会增加看懂代码的难度，通用做法是把部分代码抽出来作为函数来调用，减少代码的复杂度。 //:行注释， /*...*/：块注释 JavaScript严格区分大小写 数据类型和变量 数字。JavaScript不区分整数和浮点数，统一用Number表示。一般用16进制表示整数，如0xa5b4c3d2，Number可以直接做四则运算，规则与数学一致。 字符串。以&#39;&#39;或&quot;&quot;括起来的任意文本。注，这里的引号不是字符串的一部分。 布尔值。布尔值：true，false。布尔运算：&amp;&amp;-与运算；||-或运算；！-非运算。布尔值常用于条件判断中。 比较运算符。通过比较运算符得到一个布尔值，JavaScript允许对任意数据类型作比较。（注意：i)有2种比较运算符，==会自动转换数据类型再比较，很多时候会得到奇怪的结果；===不会自动转换，如果数据类型不一致，返回false。因此应坚持使用===。ii)NaN这个特殊的Number与所有其它值都不相等，包括他自己，唯一能判断NaN的方法是isNaN()函数。iii)浮点数在运算中会产生误差，因此比较两个浮点数是否相等只能计算他们之差的绝对值，看是否小于某个阈值） null和undefined。null表示空，undefined表示值未定义。大多数情况下应该用null，undefined仅仅在判断函数参数是否传递的情况下有用。 数组。JavaScript的数组可以包括任意数据类型，是一组按顺序排列的集合，数组用[]表示，元素用，分隔，创建数组也可用Array()函数实现，但建议用[]直接生成数组。 对象。JavaScript的对象是一组由键-值组成的无序集合，对象的键都是字符串类型，值可以是任意数据类型。每个键又称为对象的属性，获取对象的属性通过‘对象变量.属性名’的方式。 变量。变量可以是任意数据类型，变量名是大小写英文、数字、$和_的组合，且不能数字开头。变量名不能是JavaScript的关键字，声明变量用var语句，赋值用=，同一个变量可以反复赋值，而且可以是不同类型的变量，但是注意只能用var声明一次，因此JavaScript属于动态语言。 strict模式。如果一个变量没有通过var声明就被使用，那么该变量自动被声明为全局变量。strict模式下代码强制通过var声明变量，未使用var声明变量就使用的将导致错误。启用strict模式的方法是在JavaScript代码第一行写上&#39;use strict&#39;; 字符串 多行字符串。由于多行字符串用\n写比较麻烦，ES6中新增了反引号法，即...; 模板字符串。+可以拼接字符串，ES6中新增字符串{不带引号}, ${变量名}, __${}__;的方式实现字符串拼接。 操作字符串。变量名.length;返回字符串长度。字符串是不可变的，对某个索引赋值，不会报错，但也无任何作用。 字符串的常用方法。注：调用这些方法不会改变原有字符串内容，而是返回一个新字符串。变量名.toUpperCase();–全部变大写；变量名.toLowerCase();–全部变小写；变量名.indexOf(&#39;指定字符串&#39;);–返回指定字符串的位置，若无则-1；变量名.substring(x, y);–返回指定区间的字串，注意[x,y)。substring(x);表示从x到最后。 注：字符串越界显示为空（.substring()），数组越界显示为[]，（.slice()）。 数组 直接给Array的length赋一个新值会导致Array大小的变化。对Array的索引赋值会直接修改Array。通过索引赋值时，若索引超出了范围，同样会引起Array大小的变化。不建议直接修改Array的大小，访问索引时确保不越界。 indexOf。与字符串功能一致。 slice。类似字符串中的substring()。 push()–尾部添加若干元素，pop()–删除最后一个元素。空数组pop不会报错，而是返回undefined。 unshift()–头部添加若干元素，shift()–删除第一个元素。空数组shift不会报错，返回undefined。 sort()–数组排序。 reverse()–数组反转。 splice()–修改Array的万能法，可从指定索引开始删除若干元素，然后再从该位置添加若干元素。（案例：从2开始删3个，再加2个：arr.splice(2, 3, &#39;qw&#39;, &#39;eqwe&#39;)；只删除不添加：arr.splice(2,2)；只添加不删除：arr.splice(2, 0, &#39;dda&#39;, &#39;eeasd&#39;)） concat()。连接2个数组，返回一个新的数组。concat()方法并没有修改当前数组，而是返回一个新的数组。注：concat()方法可以接收任意个元素和数组，并且自动把数组拆开，然后再添加到新数组中。（如：var arr=[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;]; arr.concat(1,2,[3,4]); 返回的是[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,1,2,3,4]）。 join()。把数组中的每个元素用指定的字符串连接起来，然后返回连接后的字符串。若数组的元素不是字符串，则自动转换为字符串后再连接。 多维数组。即数组的元素中也包含数组。索引按嵌套方式。如：arr[2][2]。 对象 JavaScript的对象是一种无序的集合数据类型，由若干键值对组成，用于描述现实世界中的某个对象。 JavaScript用一个{...}表示一个对象，键值对以xxx: xxx形式申明，用,隔开，最后一个键值对不要加,。访问属性通过.操作符完成，但要求属性名必须是一个有效的变量名，若属性名包含特殊字符，就必须用’’括起来。这种情况下访问时必须用对象名[&#39;xxx&#39;]，而不能用对象名.属性了。注意：访问不存在的属性会返回undefined。 由于JavaScript是动态类型的，因此可以自由地给一个对象添加或删除属性，检测对象是否拥有某一属性，可以用in操作符。注：in判断属性存在，该属性不一定是对象的，可能是该对象继承得来的，因此判断属性是否是对象自身拥有的而非继承，可以用hasOwnProperty()方法。 条件判断 JavaScript使用if () {...} else {...}来进行条件判断，建议{}不要省略。 多重条件判断，if () {...} else if () {...} else {...}。 JavaScript把null，undefined，0，NaN和’’视为false，其他均为true。 循环 JavaScript的循环有2种，一种是for循环，通过初始条件、结束条件和递增条件来循环执行语句块。如： 123456var x = 0; var i; for (i=1; i&lt;=10000; i++) &#123; x = x + i;&#125; for循环最常用于利用索引遍历数组。for循环的3个条件都是可以省略的，如果没有退出循环的判断条件，必须使用break语句退出循环，否则就是死循环。 for ... in。是for循环的一个变体，可以把一个对象的所有属性依次循环出来。要过滤掉对象继承的属性，用hasOwnProperty()来实现。由于数组也是对象，而他的每个元素的索引被视为对象的属性，因此for…in循环可以直接循环出数组的索引。注：for…in对数组的循环得到的是String而不是Number。如： 123456var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]; for (var i in a) &#123; console.log(i); console.log(a[i]);&#125; while。while循环只有一个判断条件，条件满足，就不断循环。while () {...} do...while。它和while的唯一区别是不是在每次循环开始时判断条件，而是在每次循环完成的时候判断条件。注意，该循环至少执行一次而for和while循环则可能一次都不执行。do {...} while (); Map和Set Map和Set是ES6新增的数据类型，类似于字典。 Map是一组键值对的结构，具有极快的查找速度。初始化Map需要一个二维数组，或者直接初始化一个空Map，Map具有以下方法。 1234567var m = new Map(); // 空Map m.set(&apos;Adam&apos;, 67); // 添加新的key-value m.set(&apos;Bob&apos;, 59); m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;: true m.get(&apos;Adam&apos;); // 67 m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos; m.get(&apos;Adam&apos;); // undefined。 由于一个key只能对应一个value，所以多次对一个key放入value，后面的值会冲掉前面的值。 Set和Map类似，也是一组key的集合，但不存储value，在Set中，没有重复的key。重复元素在Set中自动被过滤。通过add(key)方法可以添加元素，通过delete(key)方法删除元素。 iterable 遍历Array可以使用下标，遍历Map和Set无法使用下标，为了统一集合类型，ES6引入了iterable类型，Array,Map,Set都属于iterable类型，具有iterable类型的集合可以通过新的for…of循环来遍历。 for…of的用法。 123456789101112var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]; var s = new Set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]); var m = new Map([[1, &apos;x&apos;], [2, &apos;y&apos;], [3, &apos;z&apos;]]); for (var x of a) &#123; // 遍历Array console.log(x); &#125; for (var x of s) &#123; // 遍历Set console.log(x); &#125; for (var x of m) &#123; // 遍历Map console.log(x[0] + &apos;=&apos; + x[1]);&#125; for…in和for…of的区别。for…in会把新增的属性包括在内 ，而Array的length却不包括在内。for…of只循环集合本身的元素。 更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。方法如下： 123456789101112131415var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]; a.forEach(function (element, index, array) &#123; console.log(element + &apos;, index = &apos; + index); &#125;); var s = new Set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]); s.forEach(function (element, sameElement, set) &#123; console.log(element); &#125;); var m = new Map([[1, &apos;x&apos;], [2, &apos;y&apos;], [3, &apos;z&apos;]]); m.forEach(function (value, key, map) &#123; console.log(value); &#125;); JavaScript的函数调用不要求参数必须一致，因此可以忽略不感兴趣的参数，如 12345var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]; a.forEach(function (element) &#123; console.log(element); &#125;); 函数篇函数 几乎所有的高级语言都支持函数，JavaScript的函数不仅是“头等公民”，而且像可以变量一样使用，具有非常强的抽象能力。 函数定义和调用 定义函数。以下2种方式等价。因为函数实际上也是一个函数对象，函数名可以视为指向该函数的变量。注意第2种表述结尾的; 123456789101112131415function abs(x) &#123; if (x &gt;= 0) &#123; return x; &#125; else &#123; return -x; &#125;&#125;var abs = function (x) &#123; if (x &gt;= 0) &#123; return x; &#125; else &#123; return -x; &#125;&#125;; 调用函数。调用函数时按顺序传入参数即可，传入的参数比定义的多或者少都没有问题，少的话，函数参数将收到undefined，计算结果为NaN。避免这种结果可采用“检查”，即： 12345678910function abs(x) &#123; if (typeof x !== &apos;number&apos;) &#123; throw &apos;Not a number&apos;; &#125; if (x &gt;= 0) &#123; return x; &#125; else &#123; return -x; &#125;&#125; arguments。该关键字只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数，arguments类似Array但不是一个Array。常用于判断传入参数的个数。 12345678910// foo(a[, b], c)// 接收2~3个参数，b是可选参数，如果只传2个参数，b默认为null：function foo(a, b, c) &#123; if (arguments.length === 2) &#123; // 实际拿到的参数是a和b，c为undefined c = b; // 把b赋给c b = null; // b变为默认值 &#125; // ...&#125; rest参数。由于JavaScript函数允许接收人一个参数，因此不得不用arguments来获取所有参数，以下2种方式可以达到一样的效果。 1234567891011function foo(a, b) &#123; var i, rest = []; if (arguments.length &gt; 2) &#123; for (i = 2; i&lt;arguments.length; i++) &#123; rest.push(arguments[i]); &#125; &#125; console.log(&apos;a = &apos; + a); console.log(&apos;b = &apos; + b); console.log(rest);&#125; 1234567function foo(a, b, ...rest) &#123; console.log(&apos;a = &apos; + a); console.log(&apos;b = &apos; + b); console.log(rest);&#125;foo(1, 2, 3, 4, 5); 注：若传入的参数连正常定义的参数也未填满，rest参数会接收1个空数组，而不是undefined。 return语句不要换行，即return不要和后面的语句换行，否则会自动在return后加;，如要换行，请在return后加{。 变量作用域与解构赋值 var申明的变量实际上是有作用域的。如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，函数体外不可引用该变量。如果2个不同的函数各自申明了同一个变量，该变量只在各自的函数体内起作用，相互独立。嵌套函数中内部函数可以访问外部函数定义的变量，反之则不行。如果内部函数定义了和外部函数重名的变量，则内部函数的变量将屏蔽外部函数的变量。 变量提升。函数的特点之一是它会先扫描整个函数体的语句，把所有申明的变量提升到函数的顶部。因此，编码过程中应遵循“在函数内部首先申明所有变量”这一规则。注意：提升的是申明而不是赋值。 全局作用域。不在任何函数内定义的变量就具有全局作用域。JavaScript默认的一个全局对象是window，全局作用域的变量实际上被绑定到了window的一个属性。也即JavaScript实际上只有一个全局作用域。任何变量由下往上查找。 名字空间。全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。如： 123456789// 唯一的全局变量MYAPP:var MYAPP = &#123;&#125;;// 其他变量:MYAPP.name = &apos;myapp&apos;;MYAPP.version = 1.0;// 其他函数:MYAPP.foo = function () &#123; return &apos;foo&apos;;&#125;; 局部作用域。在for循环等语句块中无法定义具有局部作用域的变量，因此ES6引入关键字let，用let替代var可以申明一个块级作用域的变量。let的变量仅作用于循环内部。 常量。ES6以前，用全部大写的变量来表示常量，ES6引入关键字const定义常量，const也具有块级作用域。 解构赋值。可以同时对一组变量进行赋值。对数组进行解构赋值时，多个变量要用[...]括起来。 var [x, y, z] = [&#39;hello&#39;, &#39;JavaScript&#39;, &#39;ES6&#39;]; 如果数组本身有嵌套，通过相同结构赋值，嵌套层次和位置要保持一致。 let [x, [y, z]] = [&#39;hello&#39;, [&#39;JavaScript&#39;, &#39;ES6&#39;]]; 解构赋值可以忽略某些元素。 let [, , z] = [&#39;hello&#39;, &#39;JavaScript&#39;, &#39;ES6&#39;]; 如果需要从一个对象中取出若干属性，也可以使用解构赋值。 12345678var person = &#123; name: &apos;小明&apos;, age: 20, gender: &apos;male&apos;, passport: &apos;G-12345678&apos;, school: &apos;No.4 middle school&apos;&#125;;var &#123;name, age, passport&#125; = person; 对一个对象进行解构赋值时，同样可以直接对嵌套的对象属性进行赋值，只要保证对应的层次一致。 12345678910111213var person = &#123; name: &apos;小明&apos;, age: 20, gender: &apos;male&apos;, passport: &apos;G-12345678&apos;, school: &apos;No.4 middle school&apos;, address: &#123; city: &apos;Beijing&apos;, street: &apos;No.1 Road&apos;, zipcode: &apos;100001&apos; &#125;&#125;;var &#123;name, address: &#123;city, zip&#125;&#125; = person; 使用解构赋值对对象属性进行赋值时，如果对应的属性不存在，变量被赋值为undefined，如果要使用的变量名和属性名不一致，可通过下面语法获取： 1234567891011121314var person = &#123; name: &apos;小明&apos;, age: 20, gender: &apos;male&apos;, passport: &apos;G-12345678&apos;, school: &apos;No.4 middle school&apos;&#125;;// 把passport属性赋值给变量id:let &#123;name, passport:id&#125; = person;name; // &apos;小明&apos;id; // &apos;G-12345678&apos;// 注意: passport不是变量，而是为了让变量id获得passport属性:passport; // Uncaught ReferenceError: passport is not defined 解构赋值还可以使用默认值，避免不存在的属性返回undefined。有时候，如果变量已经被申明，再次赋值时正确的写法也会报错，是因为JavaScript引擎将{开头的语句当块处理了，所以=不在合法，解决方案是用()括起来， 1234567// 声明变量:var x, y;// 解构赋值:&#123;x, y&#125; = &#123; name: &apos;小明&apos;, x: 100, y: 200&#125;;// 语法错误: Uncaught SyntaxError: Unexpected token =(&#123;x, y&#125; = &#123; name: &apos;小明&apos;, x: 100, y: 200&#125;); 使用场景。常用于简化代码。如交换2个变量的值，快速获取当前页面的域名和路径等。注意：解构赋值特性是ES6支持的。 方法 在一个对象中绑定函数，称为这个对象的方法。绑定到对象上的函数称为方法，和普通函数没什么区别，但它在内部使用了this关键字，它是一个特殊变量，始终指向当前对象。注：JS的设计错误–如果一对象的方法形式调用，该函数的this指向被调用的对象，如果单独调用函数，此时this只想全局对象，即window。即要保证this指向正确，必须用obj.xxx()的形式调用。在strict模式下this指向undefined。 1234567891011var xiaoming = &#123; name: &apos;小明&apos;, birth: 1990, age: function () &#123; var y = new Date().getFullYear(); return y - this.birth; &#125;&#125;;xiaoming.age; // function xiaoming.age()xiaoming.age(); // 今年调用是25,明年调用就变成26了 函数内部的函数的this指向undefined，修复的方法是在外函数内var that=this捕获this，然后在内函数中使用that代替this。 12345678910111213141516&apos;use strict&apos;;var xiaoming = &#123; name: &apos;小明&apos;, birth: 1990, age: function () &#123; var that = this; // 在方法内部一开始就捕获this function getAgeFromBirth() &#123; var y = new Date().getFullYear(); return y - that.birth; // 用that而不是this &#125; return getAgeFromBirth(); &#125;&#125;;xiaoming.age(); // 25 apply。要指定函数的this指向哪个对象，可以用函数本身的apply方法，他接收2个参数，第一个参数是要绑定的this变量，第二个参数时Array，表示函数本身的参数。另一个与apply()类似的方法是call()，唯一区别是apply()把参数打包成Array再传入，call()把参数按顺序传入。对普通函数调用，通常把this绑定为null。 12345678910111213function getAge() &#123; var y = new Date().getFullYear(); return y - this.birth;&#125;var xiaoming = &#123; name: &apos;小明&apos;, birth: 1990, age: getAge&#125;;xiaoming.age(); // 25getAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空 装饰器。可以利用apply()动态改变函数的行为。JS的所有对象都是动态的，即使是内置的函数，我们也可以重新指向新的函数。 123456789&apos;use strict&apos;;var count = 0;var oldParseInt = parseInt; // 保存原函数window.parseInt = function () &#123; count += 1; return oldParseInt.apply(null, arguments); // 调用原函数&#125;; 高阶函数由于变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称为高阶函数。 12345function add(x, y, f) &#123; return f(x) + f(y);&#125;var x = add(-5, 6, Math.abs); // 11console.log(x); map/reduce map。map()作为高阶函数，把运算规则抽象了。如： 1234567&apos;use strict&apos;;function pow(x) &#123; return x * x;&#125;var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];var results = arr.map(pow); // [1, 4, 9, 16, 25, 36, 49, 64, 81]console.log(results); reduce。利用reduce()求积。 123&apos;use strict&apos;;function product(arr) &#123; return arr.reduce(function(x,y) &#123;return x*y;&#125;); 利用map和reduce实现string2int()函数。 12345&apos;use strict&apos;;function string2int(s) &#123; var arr=s.split(&apos;&apos;); arr=arr.map(function(x) &#123;return x*1;&#125;); return arr.reduce(function(x,y) &#123;return x*10+y;&#125;); 首字母大写。 1234&apos;use strict&apos;;function normalize(arr) &#123; return arr.map(function (s) &#123; return s[0].toUpperCase() + s.substring(1,s.length).toLowerCase();&#125;); 字符串变整数。 12345&apos;use strict&apos;;var arr = [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;];var r;r = arr.map(Number);console.log(r); filter]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>网页</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown基本语法]]></title>
    <url>%2F2019%2F02%2F26%2Fmarkdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[说在前面Markdown是一种类似于HTML的标记语言，HTML由一对一对的标签组成，而Markdown则使用各种简单符号定义文本的类型，简单易学，让我们一起来开始吧。 标题标题一共有6种，分别用1-6个#标记，类比HTML中的h1-h6。 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 字体常用字体主要就是粗体，斜体之类啦。 *我是斜体* **我是粗体** ***我是粗斜体，嘿嘿*** ~~我是被删除的根号三~~ 引用引用以&gt;开头，&gt;的多少影响的是引用的标记的长短，不信你看。 &gt; 我被标记了 &gt;&gt; 我也被标记了 &gt;&gt;&gt; 别说了，我也是 链接链接的个是比较固定，语法如下： [链接名称](连接的地址) 图片图片与链接类似，之在前面多了一个!而已。 ![图片名称](图片地址) 分割线分割线可用不少于3个*，-来标记，数量多少无明显差异，但是不能混用哦。 -------- **** 列表列表分为有序列表和无序列表，有序的如1,2,3等，无序的通常前面加个断点记号+，-，*等。 &lt;!-- 有序列表 --&gt; 1. 科学 2. 文化 3. 哲学 &lt;!-- 无序列表 --&gt; + 科学 + 文化 &lt;!-- 列表嵌套 --&gt; 1. 科学 - 天文 - 地理 - 物理 2. 文化 - 儒家 - 道家 - 释家 代码代码分为单行代码（如某些安装命令）和多行代码块（函数，循环等），分别用特殊符号引起来即可。当然，你也可以先写完，然后全部缩进一个TAB，也是一样的效果。 `我是一行代码` 1我是好多代码 表格表格稍微复杂一点，你可以把它看成几行几列的矩阵，填满每个格子即可，第一行是表头，一行一行描述即可。如下，第二行是用于分隔表头和内容的，此外，在此处可以定义文字的对齐方式，默认是左对齐，在-的右边加:则为右对齐，-的两边都加:则为居中，每一列的对齐方式都可以不同。 表头|表头|表头 -|-|- 内容|内容|内容 内容|内容|内容 内容|内容|内容 流程图不常用，很多编辑器也不支持，了解即可。 12345678st=&gt;start: 开始op=&gt;operation: My Operationcond=&gt;condition: Yes or No?e=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op&amp;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>写作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何使用HEXO搭建个人博客]]></title>
    <url>%2F2019%2F02%2F18%2F%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[搭建环境搭建博客到本地 下载 Node.js，并安装。 下载 Git， 并安装。 安装Hexo。 a. 搭建Hexo的环境，在Git Bash中运行以下命令： npm install -g hexo -cli b. 初始化Hexo，在Git Bash中运行以下命令： 123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 即为存放Hexo初始化文件的路径，也即站点目录。新建之后在路径下会产生一些文件。 c. 启动服务器。在该路径下，使用Git Bush(即先定位到../../folder，然后右键Git Bash Here)，运行以下命令： hexo s d. 此时访问网址：http://localhost:4000 本地的博客已搭建成功。 将博客搭建到GitHub本地的博客只能本机访问，要想可通过网络访问，可借助GitHub实现。 创建GitHub账号并登陆。 创建仓库，仓库名为：&lt;Github账号名称&gt;.github.io 将本地Hexo博客推送到GithubPages a. 安装hexo-deployer-git插件。在Git Bash运行以下命令即可： npm install hexo-deployer-git --save b. 添加SSH key。在Git Bash运行以下命令： ssh-keygen -t rsa -C &quot;邮箱地址&quot; 添加到GitHub。复制密钥文件内容粘贴到New SSH key。 测试是否添加成功。在Git Bash运行以下命令：出现”you’ve successfully ….”即可。 12ssh -T git@github.comyes c. 修改站点目录下的配置文件 (_config.yml)。修改文件末尾： 1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master d. 回到gitbash中，进入你的blog目录，分别执行以下命令： 123hexo cleanhexo generatehexo deploy Hexo博客已经成功搭建在GithubPages, 域名为https://&lt;Github账号名称&gt;.github.io。 主题优化启用Next主题前往https://hexo.io/themes/选择自己喜欢的主题并下载，复制到站点目录下的themes文件下，然后修改站点目录下的_config.yml文件中的Extensions部分，如下即可。12345# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: nextplugins: hexo-generate-feed 修改主题为中文修改站点目录下的_config.yml文件中的Site部分的language的值，修改为zh-Hans。 更改标题作者和链接修改站点目录下的_config.yml文件中的Site部分的title，subtitle的值，URL中的url的值即可。 更改主题样式修改next主题目录下的_config.yml文件中的Schemes部分，选择某一种主题，如：12345# Schemes# scheme: Muse# scheme: Mist# scheme: Piscesscheme: Gemini 增加关于标签分类页修改next主题目录下的_config.yml文件中的menu部分，开启about，tags,categories,如下，下略。123456789menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat 新增页面的正确打开方式若现在保存配置文件，然后素质三连123hexo cleanhexo ghexo s 在本地网页上看到的新增的3个页面都为空，且关于页面是404，因此需要一些额外的操作才能使这几个页面生效，此处以标签页为例，首先进到站点目录下的source文件夹下，右键Git Bash输入：hexo n page tags此时会发现source文件下多了一个tags文件夹，进去，打开index.md文件，编写其中内容，如：12345---title: 标签date: 2019-02-16 21:25:50type: &quot;tags&quot;--- 此时再打开标签页就会显示暂无标签。 更改并设置可旋转头像启用next主题目录下的_config.yml文件中的avatar，值为头像图片路径，建议将图片都放在：\blog\themes\next\source\images下，如：avatar: /images/luffy.jpg 然后定位到\blog\themes\next\source\css\_common\components\sidebar，编辑sidebar-author.styl文件，修改部分如下，其他部分不变，即可实现头像旋转：12345678910111213.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; border-radius: 50%; transition: 2s all;&#125;.site-author-image:hover&#123; transform: rotate(360deg);&#125; 启用侧边栏社交链接启用next主题目录下的_config.yml文件中的social，启用想增加的社交连接，将链接改为自己的相应网站的个人主页网址即可。 启用友情链接启用next主题目录下的_config.yml文件中的links，按照文件中给的样式增加你想要添加的友情链接。 开启打赏功能启用next主题目录下的_config.yml文件中的Reward，开启reward_comment，wechatpay，alipay，修改它们的值。第一个表示求打赏的话，第2，3分别是微信，支付宝的付款吗图片。 开启订阅与RSS启用next主题目录下的_config.yml文件中的Wechat Subscriber，下面的4行全部开启，enabled值设为true，qcode的值为个人公众号二维码。 切换到站点目录下，安装插件npm install --save hexo-generator-feed，然后编辑站点目录下的_config.yml文件中的Extensions，在其下方添加一行代码：plugins: hexo-generate-feed，然后启用next主题目录下的_config.yml文件中的rss，修改为：1234# Set rss to false to disable feed link.# Leave rss as empty to use site&apos;s feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml 首页文章设置阅读全文修改next主题目录下的_config.yml文件中的auto_excerpt：12345# Automatically Excerpt. Not recommend.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt: enable: true length: 150 添加动态背景修改next主题目录下的_config.yml文件中的Canvas-nest，默认有4种背景可供选择，将想选的背景的值改为true即可。 添加fork GitHub在GitHub Ribbons或GitHub Corners选择一款你喜欢的挂饰，拷贝方框内的代码，将刚刚复制的挂饰代码，添加到Blog/themes/next/layout/_layout.swig文件中，放在&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;下方即可。 修改文章内链接样式打开\blog\themes\next\source\css\_common\components\post\post.styl，在底部添加如下代码，即可实现鼠标移到该链接处字体变紫色的效果：1234567.post-body p a&#123; color: #345; border-bottom: none; &amp;:hover&#123; color: purple; &#125;&#125; 修改文章底部标签打开\blog\themes\next\layout\_macro\post.swig，修改第359行，将#替换成其他图标，可以在http://www.fontawesome.com.cn/faicons/寻找你想要的图标，如此出我们将#替换成了&lt;i class=&quot;fa fa-tag&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;。12345678&lt;footer class=&quot;post-footer&quot;&gt; &#123;% if post.tags and post.tags.length and not is_index %&#125; &lt;div class=&quot;post-tags&quot;&gt; &#123;% for tag in post.tags %&#125; &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125; &lt;/div&gt; &#123;% endif %&#125; 增加来必力评论系统注册并登陆来必力获取你的LiveRe UID。填写LiveRe UID到主题配置文件_config.yml的livere_uid即可。 增加本地搜索功能安装插件，在站点的根目录下执行以下命令：npm install hexo-generator-searchdb --save，然后在站点配置文件中添加以下代码：123456# local_searchsearch: path: search.xml field: post format: html limit: 10000 然后启用主题目录下的配置文件中的local_search，值改为true即可。 增加不蒜子统计功能编辑主题配置文件中的busuanzi_count的配置项即可。如：1234567891011121314151617# Show PV/UV of the website/page with busuanzi.# Get more information on http://ibruce.info/2015/04/04/busuanzi/busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: 本站访客数 &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; site_uv_footer: 人次 # custom pv span for the whole site site_pv: true site_pv_header: 本站总访问量 &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; site_pv_footer: 次 # custom pv span for one page only page_pv: true page_pv_header: 本文总阅读量 &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt; page_pv_footer: 次 然后找到主题调用不蒜子的swig文件。一般在”\themes*\layout_third-party\analytics\busuanzi-counter.swig”，将原域名dn-lbstatics.qbox.me/改为busuanzi.ibruce.info/。 增加内容分享服务开启主题配置文件的jiathis，增加值为true即可。 增加加载效果开启主题配置文件的pace，值改为true，下面的list是所有的加载样式，选择其一复制到pace_theme即可。 显示当前浏览进度修改主题配置文件如下：12345# Back to top in sidebar (only for Pisces | Gemini).b2t: true# Scroll percent label in b2t button.scrollpercent: true 增加鼠标点击特效在/themes/next/source/js/src下新建文件clicklove.js，接着把以下粘贴到clicklove.js文件中。代码如下： !function(e,t,a){function n(){c(&quot;.heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: &#39;&#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}&quot;),o(),r()}function r(){for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)}function o(){var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e){t&amp;&amp;t(),i(e)}}function i(e){var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)}function s(){return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document); 然后在\themes\next\layout\_layout.swig文件末尾添加：12&lt;!-- 页面点击小红心 --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt; 隐藏底部的强力驱动找到\blog\themes\next\layout\_partials\footer.swig，注释掉24-41行这段代码即可。 增加字数统计和阅读时长功能先在站点目录下安装插件npm install hexo-wordcount --save，然后修改主题配置文件相应部分：12345678# Post wordcount display settings# Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount: item_text: true wordcount: true min2read: true totalcount: false separated_meta: true 添加二次元生物其实就是在博客中添加Live 2D模型。首先安装插件： npm install --save hexo-helper-live2d 然后下载模型文件，可在此处选择你喜欢的模型： npm install live2d-widget-model-shizuku 然后在站点配置文件和主题配置文件中添加以下配置： live2d: enable: true scriptFrom: local pluginRootPath: live2dw/ pluginJsPath: lib/ pluginModelPath: assets/ tagMode: false debug: false model: use: live2d-widget-model-shizuku display: position: right width: 150 height: 300 mobile: show: true 注：model: use的值为你选择的模型名称，模型名称必须是你已下载的。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>分享</tag>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试文章]]></title>
    <url>%2F2019%2F02%2F16%2F%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[测试文章第一篇文章这是一个三级标题 列表1 列表2 a 子列表1 b 子列表 列表3 有哪些值得推荐的字体？ 这是斜体字型这是粗体字型 &lt;html&gt;&lt;/html&gt; 123456789&lt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 这是一部分引用内容]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
