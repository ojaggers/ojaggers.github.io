<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>肩挑着草长莺飞</title>
  
  <subtitle>ojaggers.github.io</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-07T10:29:36.983Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ojaggers</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>人生苦短，我用Git</title>
    <link href="http://yoursite.com/2019/03/07/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Git/"/>
    <id>http://yoursite.com/2019/03/07/人生苦短，我用Git/</id>
    <published>2019-03-07T10:27:56.000Z</published>
    <updated>2019-03-07T10:29:36.983Z</updated>
    
    <content type="html"><![CDATA[<h3 id="人生苦短，我用Git"><a href="#人生苦短，我用Git" class="headerlink" title="人生苦短，我用Git"></a>人生苦短，我用Git</h3><h4 id="Git背景介绍"><a href="#Git背景介绍" class="headerlink" title="Git背景介绍"></a>Git背景介绍</h4><p>Linux是一个开源的系统，深受程序员喜爱，在开源社区中世界各地的大佬都可以进一步完善和优化Linux，最后由Linus大神统一归纳整理。随着社区成员的增加，工作量逐渐增加，Linus累觉不爱，使用了一个商业集中式版本控制系统BitKeeper进行管理。然而极客自然有极客的乐趣，社区的一个哥们试图破解这个商业软件，然后就被发现了，软件公司表示要收回它们的使用权。Linus一怒之下，哼，花了两周，用C写了一个分布式管理系统，对，就是Git。</p><p>Git的主要作用就是记录文档的每一次修改过程，更好的存储每一个版本，替代以往的每一次修改的文档都存储为一个文件，最后生成一堆文件的困扰。对，你想的没错，在改论文的时候一般得改个十遍八遍，最后自己都懵了有木有，如果使用Git，一切尽在掌握。然而，由于word是二进制文件，因此，Git处理不了.doc文件，只能处理文本文件，txt,html,md等等等等，不一而足。</p><ul><li>Git安装：下载<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a>，然后默认安装即可，从开始菜单找到Git Bash，打开，设置用户名和地址。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Your Name&quot;</span><br><span class="line">git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure></li></ul><p>由于git config的–global参数，因此本电脑所有仓库将使用这个用户名和地址，当然，你也可以对仓库设置不同的用户名和地址。</p><ul><li>创建版本库：版本库就是仓库，也就是一个目录，目录中的文件都可以被Git管理起来。</li></ul><p>首先在任意地方创建一个空目录，（注意；以下均在Git Bash中执行而不是cmd）<br><code>mkdir learngit</code><br>然后通过<code>git init</code>将该目录初始化为Git可管理的仓库，此时在当前目录下会多出一个<code>.git</code>的目录，它是用来跟踪管理版本库的。</p><ul><li><p>如何将文件添加到版本库<br>  例如编写一个test.txt：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure><p>  然后将这个文件放在learngit文件夹下，放在其他地方Git就无能为力了，然后我们开始将文件添加进去。<br>  第一步：添加文件到仓库<br>  <code>git add test.txt</code><br>  第二步：提交文件到仓库<br>  <code>git commit -m &quot;wrote a test file&quot;</code></p></li></ul><h4 id="Git文件的版本管理"><a href="#Git文件的版本管理" class="headerlink" title="Git文件的版本管理"></a>Git文件的版本管理</h4><p>现在修改test.txt文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure></p><p>然后运行<code>git status</code>查看结果。结果提示表明test.txt文件被修改过了，但还没有准备提交的修改。</p><p>然后我们可以通过<code>git diff test.file</code>查看修改的地方。</p><p>接下来就可以将它提交到仓库了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add test.txt</span><br><span class="line">git commit -m &quot;add distributed&quot;</span><br></pre></td></tr></table></figure></p><p>此时再来查看仓库的当前状态。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></p><p>表明我们当前没有需要提交的修改，而且工作目录是干净的。</p><h5 id="回到过去"><a href="#回到过去" class="headerlink" title="回到过去"></a>回到过去</h5><p>再次修改test.txt。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br></pre></td></tr></table></figure></p><p>然后提交到仓库。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add test.txt</span><br><span class="line">$ git commit -m &quot;append GPL&quot;</span><br><span class="line">[master 3b2047b] append GPL</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure></p><p>到目前为止我们已经提交了3次，也就是存在3个不同的版本。可以通过<code>git log</code>查看。他将显示从最近到最远的提交日志，也可以通过<code>git log --pretty=oneline</code>简化输出结果。注意，每一行的前面的一串数字是<code>commit id</code>，也就是版本号，每次提交一个新版本，Git会自动将她们串成一条时间线。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">3b2047b84f373b1a5de79a84f87c8a0039255e79 (HEAD -&gt; master) append GPL</span><br><span class="line">4960c61015466c564c030f527054c15668cda429 add distributed</span><br><span class="line">b85c6aaa8843be84cbd621e9928e687c8e317db8 wrote a test file</span><br></pre></td></tr></table></figure></p><p>现在问题来了，如果想将文件回退到上一版本，即<code>add distributrd</code>那个版本，若何作为呢。</p><p>在Git中，用<code>HEAD</code>表示当前版本，上一个版本是<code>HEAD^</code>，上上个版本是<code>HEAD^^</code>，可以一直往上回溯，若往上n个版本，你可以<code>HEAD~n</code>。通过日志我们知道当前版本为<code>append GPL</code>，回到上一个版本可以使用<code>git reset</code>命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset  --hard HEAD^</span><br><span class="line">HEAD is now at 4960c61 add distributed</span><br></pre></td></tr></table></figure></p><p>打开test.txt，可以发现内容确实被还原了，当然，在bash中你也可以<code>cat test.txt</code>直接查看文件内容。按此方法我们还可以继续回退，然而，当我们查看日志时，发现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br><span class="line">commit 4960c61015466c564c030f527054c15668cda429 (HEAD -&gt; master)</span><br><span class="line">Author: jagger &lt;ojaggers@163.com&gt;</span><br><span class="line">Date:   Wed Mar 6 09:21:44 2019 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br><span class="line"></span><br><span class="line">commit b85c6aaa8843be84cbd621e9928e687c8e317db8</span><br><span class="line">Author: jagger &lt;ojaggers@163.com&gt;</span><br><span class="line">Date:   Wed Mar 6 09:11:40 2019 +0800</span><br><span class="line"></span><br><span class="line">    wrote a test file</span><br></pre></td></tr></table></figure></p><p>是的，只剩2个版本了，最新的<code>append GPL</code>已经没了，经没了，没了，了。是不是有点小小的后悔，莫慌，我们先在bash中找一下那个版本的版本号，<code>3b2047b84f373b1a5de79a84f87c8a0039255e79</code>，然后就可以指定回去了，当然，版本号不需写这么多，写个头几位就行了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 3b204</span><br><span class="line">HEAD is now at 3b2047b append GPL</span><br></pre></td></tr></table></figure></p><p>好了，转危为安。此时你打开文件会发现内容变了，打开日志也能看见3条记录了。</p><p>当然了，如果你忘了这个版本号呢，bash已经关掉了，找不到记录了，怎么办，莫慌，Git不会让你失望的，Git中<code>git reflog</code>用来记录每一次命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">3b2047b (HEAD -&gt; master) HEAD@&#123;0&#125;: reset: moving to 3b204</span><br><span class="line">4960c61 HEAD@&#123;1&#125;: reset: moving to HEAD^</span><br><span class="line">3b2047b (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPL</span><br><span class="line">4960c61 HEAD@&#123;3&#125;: commit: add distributed</span><br><span class="line">b85c6aa HEAD@&#123;4&#125;: commit (initial): wrote a test file</span><br></pre></td></tr></table></figure></p><p>你看，版本号啥的都有吧，Git决不让你失望。</p><p>Git的回退速度贼快，原因是Git在内部有个指向当前版本的<code>HEAD</code>指针，内存的机制你懂吧。</p><h5 id="工作区与版本库"><a href="#工作区与版本库" class="headerlink" title="工作区与版本库"></a>工作区与版本库</h5><p>工作区就是你在电脑里能看到的目录，如前面这个<code>learngit</code>文件夹。</p><p>版本库就是工作区中的隐藏目录<code>.git</code>。里面存了很多内容，主要包含stage(index)暂存区和自动创建的master分支，指向master的指针是<code>HEAD</code>。<br>前面文件添加的操作可以按下图说明。即<code>git add</code>添加文件，实际上就是把文件修改添加到暂存区；<code>git commit</code>提交修改，实际就是把暂存区的所有内容提交到当前分支，此时，暂存区中就没有任何内容了。简言之，需要提交的文件修改全都放在了暂存区，然后一次性提交暂存区的所有修改。<br><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0" alt="工作区和版本库"></p><h5 id="文件管理的实质是管理修改"><a href="#文件管理的实质是管理修改" class="headerlink" title="文件管理的实质是管理修改"></a>文件管理的实质是管理修改</h5><p>Git跟踪并管理的是修改，而不是文件。每次修改，如果不用<code>git add</code>到暂存区，就不会加入到<code>commit</code>中。</p><p><code>git diff HEAD -- readme.txt</code>可以查看工作区和版本库里最新版本的区别。</p><p><code>git diff</code>比较工作区和暂存区的区别；</p><p><code>git diff --cached</code>比较暂存区和版本库的区别；</p><p><code>git diff HEAD -- filename</code>比较工作区和版本库的区别。</p><h5 id="如何撤销修改"><a href="#如何撤销修改" class="headerlink" title="如何撤销修改"></a>如何撤销修改</h5><p>当改乱了工作区的某个文件的内容，想要直接丢弃工作区的修改时，使用<code>git checkout -- file</code></p><p>当改乱了工作区某个文件的内容，还添加到暂存区时，想丢弃修改，分为2步，先<code>git reset HEAD &lt;file&gt;</code>，然后<code>git checkout -- file</code></p><p>对于已经提交的不合适的修改到版本库时，想要撤销本次提交，采用版本回退方式，前提是没有推送到远程库。</p><h5 id="如何删除文件"><a href="#如何删除文件" class="headerlink" title="如何删除文件"></a>如何删除文件</h5><p>删除也是一种修改操作，当你要删除文件的时候，可以<code>rm aa.txt</code>。这时，有2种情况</p><ul><li><p>第一种，确实想完全删除aa.txt，那么执行以下命令，文件就从版本库中删除了。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rm aa.txt</span><br><span class="line">git commit -m &quot;remove aa.txt&quot;</span><br></pre></td></tr></table></figure></li><li><p>第二种，删错了，后悔了，若此时只执行了<code>rm aa.txt</code>，还未提交，可以通过<code>git checkout -- aa.txt</code>来将文件恢复。若删除动作已提交，则无法用checkout恢复，需要<code>git reset --hard commit_id</code>来版本回滚。</p></li></ul><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><p>你可以搭建一个运行Git的服务器，每天24小时开机，这样其他人就可以从这个服务器的仓库中克隆一份到自己的电脑进行工作，同时也可以每个用户将自己的提交推送到服务器仓库里，也可以从服务器仓库中拉取别人的提交。</p><p>还有一种方式就是借助<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>了，它可以提供Git的仓库托管服务。</p><p>首先，你需要注册并登陆，然后创建SSH Key，你可以先在Bash中执行<code>cd ~</code>找到主目录，然后<code>cd .ssh</code>看看有没有.ssh目录，如果有，看看有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这2个文件，如果没有，请执行以下命令创建SSH Key:</p><p><code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></p><p>然后一直回车使用它的默认值就可以了，然后你就会在主目录下找到刚说的2个文件。最后进入GitHub，Add New SSH，随意取一个title，在Key中粘贴<code>id_rsa.pub</code>的文本内容即可。</p><blockquote><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p></blockquote><blockquote><p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p></blockquote><h5 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h5><p>现在想把前面建在本地的learngit仓库与GitHub同步，如何做呢。</p><p>首先，在GitHub上创建一个新的仓库，仓库名就写Learngit，其他保持默认设置，然后Creat就成功创建了一个新的Git仓库，此时该仓库还是空的。</p><p>然后我们执行以下命令：</p><p><code>git remote add origin https://github.com/yourname/learngit.git</code>，这样就实现了本地和GitHub上的仓库的关联，远程库的名字叫做<code>origin</code>，接下来就是将本地库的所有内容推送到远程库上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">Enumerating objects: 34, done.</span><br><span class="line">Counting objects: 100% (34/34), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (29/29), done.</span><br><span class="line">Writing objects: 100% (34/34), 2.63 KiB | 244.00 KiB/s, done.</span><br><span class="line">Total 34 (delta 13), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (13/13), done.</span><br><span class="line">To https://github.com/yourname/learngit.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;origin&apos;.</span><br></pre></td></tr></table></figure><blockquote><p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p></blockquote><p>此时在GitHub上就可以看到和本地库中一毛一样的内容了，以后就可以通过以下命令将本地<code>master</code>分支的最新修改推送到GitHub了，这便是分布式版本库的优越性了。</p><blockquote><p>当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (xx.xx.xx.xx)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is xx.xx.xx.xx.xx.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure></p></blockquote><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。<br>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：<br>Warning: Permanently added ‘github.com’ (RSA) to the list of known hosts.<br>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><h5 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h5><p>前面是将本地库关联到远程库，那么如何将远程库拽到本地来呢？</p><p>在GitHub上选择一个远程库，然后克隆即可，譬如，本地没有learngit库，但你想把它弄到本地来修改：</p><p><code>git clone origin https://github.com/yourname/learngit.git</code><br>此时，你的电脑中learngit目录中就会有远程库中哪些文件啦。</p><h4 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h4><p>假设你要开发一个新功能，现在你写了一半，如果立刻提交，由于代码未写完，别人不能在你的工作上继续，但如果等全部写完再提交，又可能哪天忘了丢失已完成的进度。分支就可以很好地解决这一问题。你可以创建自己的分支，在分支上进行你的工作，随时提交，知道开发完成后再统一合并到原来的分支上，这样就稳妥啦。</p><h5 id="创建切换合并删除分支"><a href="#创建切换合并删除分支" class="headerlink" title="创建切换合并删除分支"></a>创建切换合并删除分支</h5><p>初始状态，<code>master</code>分支是一条线，Git用<code>master</code>指向最新的提交，再用<code>HEAD</code>指向<code>master</code>，就能确定当前分支和当前分支的提交点。每次提交，<code>master</code>分支都会向前移动一步，这样，随着提交越来越多，<code>master</code>分支的线就越来越长。</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849087937492135fbf4bbd24dfcbc18349a8a59d36d000/0" alt="分支线，提交点"></p><p>现在我们创建了一个新分支如<code>dev</code>，Git就新建了一个指针<code>dev</code>，指向<code>master</code>相同的提交点，再把<code>HEAD</code>指向<code>dev</code>，即表示当前分支在<code>dev</code>上。</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384908811773187a597e2d844eefb11f5cf5d56135ca000/0" alt="新增分支"></p><p>从此时起，对工作区的修改和提交只是针对<code>dev</code>分支了，如新提交一次后，它的状态应是如下的。</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849088235627813efe7649b4f008900e5365bb72323000/0" alt="新增分支移动"></p><p>此时，如果想把<code>dev</code>合并到<code>master</code>分支，只需把<code>master</code>指向<code>dev</code>的当前提交点即可。</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/00138490883510324231a837e5d4aee844d3e4692ba50f5000/0" alt="2分支合并"></p><p>合并之后，可以删除<code>dev</code>分支，也就是删除<code>dev</code>指针，此时，我们就只剩<code>master</code>分支了。</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384908867187c83ca970bf0f46efa19badad99c40235000/0" alt="删除分支"></p><p>具体的命令是怎样的呢？</p><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><h5 id="合并中的冲突"><a href="#合并中的冲突" class="headerlink" title="合并中的冲突"></a>合并中的冲突</h5><p>假设现在有一个新分支开发：</p><p><code>git checkout -b feature1</code></p><p>然后修改test.txt</p><p><code>Creating a new branch is quick AND simple.</code></p><p>然后在<code>feature1</code>分支上提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add test.txt</span><br><span class="line">$ git commit -m &quot;AND simple&quot;</span><br></pre></td></tr></table></figure></p><p>分支此时切换到<code>master</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br><span class="line">Your branch is ahead of &apos;origin/master&apos; by 1 commit.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br></pre></td></tr></table></figure></p><p>Git会自动提示当前的<code>master</code>分支比远程的<code>master</code>分支超前1个提交，在<code>master</code>分支上把<code>test.txt</code>修改</p><p><code>Creating a new branch is quick &amp; simple.</code></p><p>然后add，commit提交。</p><p>此时<code>master</code>分支和<code>feature1</code>分支各自都分别有新的提交：</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384909115478645b93e2b5ae4dc78da049a0d1704a41000/0" alt="2个分支均有提交"></p><p>这种状况下是没法快速合并的，会发生“冲突”。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git merge feature1</span><br><span class="line">Auto-merging readme.txt</span><br><span class="line">CONFLICT (content): Merge conflict in test.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>我们可以通过<code>git status</code>找到冲突的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of &apos;origin/master&apos; by 2 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run &quot;git commit&quot;)</span><br><span class="line">  (use &quot;git merge --abort&quot; to abort the merge)</span><br><span class="line"></span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to mark resolution)</span><br><span class="line"></span><br><span class="line">    both modified:   test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>查看test.txt的内容，可以发现Git用不同的符号标记出了不同分支的内容，我们将其修改后再保存提交，此时<code>master</code>和<code>feature1</code>分支的关系如下：</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/00138490913052149c4b2cd9702422aa387ac024943921b000/0" alt="解决分支冲突"></p><p>通过<code>git log --graph --pretty=oneline --abbrev-commit</code>可以查看分支的合并情况。最后我们通过执行<code>git branch -d feature1</code>删除<code>feature1</code>分支。</p><p>简言之，当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p><h5 id="如何进行分支管理"><a href="#如何进行分支管理" class="headerlink" title="如何进行分支管理"></a>如何进行分支管理</h5><p>一般而言，Git合并分支时一般使用<code>Fast forward</code>模式，但该模式下，删除分支后会丢掉分支信息。若要强制禁用该模式，合并时会生成新的commit，这样就可以保存分支信息。</p><p>假设我们创建并切换<code>dev</code>分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line">Switched to a new branch &apos;dev&apos;</span><br></pre></td></tr></table></figure><p>然后修改test.txt内容（例如在最后加一句话<code>我就笑笑不说话</code>）后提交。</p><p>然后切换回<code>master</code>分支，准备合并，此时禁用<code>Fast forward</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-f -m &quot;merge with no-ff&quot; dev</span><br><span class="line">Merge made by the &apos;recursive&apos; strategy.</span><br><span class="line"> test.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>合并后用<code>git log --graph --pretty=oneline --abbrev-commit</code>查看分支历史可知，这种模式下的merge结果如下：</p><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384909222841acf964ec9e6a4629a35a7a30588281bb000/0" alt="no-ff模式下的merge"></p><blockquote><p>分支策略<br>在实际开发中，我们应该按照几个基本原则进行分支管理：<br>首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；<br>那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；<br>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。<br>所以，团队合作的分支看起来就像这样：</p></blockquote><p><img src="https://cdn.liaoxuefeng.com/cdn/files/attachments/001384909239390d355eb07d9d64305b6322aaf4edac1e3000/0" alt="团队合作分支"></p><h5 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h5><p>假设工作过程中突然接到任务要修一个Bug，然而手头的工作还没完成，没法提交，怎么办？</p><p>Git提供了一个<code>stash</code>功能，执行<code>git stash</code>可以把当前工作现场储藏起来，等以后恢复现场后继续工作。现在再<code>git status</code>会发现工作区是干净的。</p><p>好的，工作区是干净的那么就可以创建分支修Bug了，首先确定在哪个分支上修Bug，假设是在<code>master</code>分支，那么先创建一个临时分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch &apos;master&apos;</span><br><span class="line">Your branch is ahead of &apos;origin/master&apos; by 6 commits.</span><br><span class="line">  (use &quot;git push&quot; to publish your local commits)</span><br><span class="line"></span><br><span class="line">$ git checkout -b issue-101</span><br><span class="line">Switched to a new branch &apos;issue-101&apos;</span><br></pre></td></tr></table></figure><p>然后修复Bug，然后保存并提交。</p><p>修复完成后，切换到<code>master</code>分支，完成合并，最后删除<code>issue-101</code>分支。</p><p>接下来该回到<code>dev</code>分支继续刚才的工作，<code>git checkout dev</code>，<code>git status</code>发现工作区是干净的，那么工作现场在哪呢，执行<code>git stash list</code>，发现Git把stash内容存在某个地方了，怎么恢复呢。此处有2种方法。</p><p>一是执行<code>git stash apply</code>恢复，这样恢复后，stash内容并不删除，需要执行<code>git stash drop</code>来删除</p><p>二是执行<code>git stash pop</code>，可以在恢复的同时把stash内容也删除，此时执行<code>git stash list</code>就看不到stash内容了。</p><h5 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h5><p>假设现在要开发代号Vulcan的新功能，但你不想因为这一个实验性质的代码搞乱主分支，所以你最好每添加一个新功能，就新建一个feature分支，在分支上开发，完成后再合并，最后，删除该分支。（当然了，只是举个例子，一般还是要保留的，万一以后又要改这个功能呢，谁知道呢）</p><p>现在，你准备开发这个功能了。经过创建切换分支，程序开发，添加提交操作后，切换到<code>dev</code>分支准备合并，然后删除就好了。</p><p>然而，如果合并之前，有通知该功能取消，如何销毁呢：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d feature-vulcan</span><br><span class="line">error: The branch &apos;feature-vulcan&apos; is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run &apos;git branch -D feature-vulcan&apos;.</span><br></pre></td></tr></table></figure><p>是的，由于<code>feature-vulcan</code>分支还没有合并，如果删除，将丢失修改，因此销毁失败。如果要强行删除，你应该：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D feature-vulcan</span><br><span class="line">Deleted branch feature-vulcan (was 287773e).</span><br></pre></td></tr></table></figure><h5 id="多人协作模式"><a href="#多人协作模式" class="headerlink" title="多人协作模式"></a>多人协作模式</h5><ul><li><p>多人协作的工作模式通常是这样：</p><p>  首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</p><p>  如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</p><p>  如果合并有冲突，则解决冲突，并在本地提交；</p><p>  没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</p><p>  如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><p>  这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p></li><li><p>小结<br>  查看远程库信息，使用<code>git remote -v</code>；</p><p>  本地新建的分支如果不推送到远程，对其他人就是不可见的；</p><p>  从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</p><p>  在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p><p>  建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p><p>  从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p></li></ul><h5 id="Rebase变基"><a href="#Rebase变基" class="headerlink" title="Rebase变基"></a>Rebase变基</h5><blockquote><p>rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</p></blockquote><h4 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h4><p>Git的标签是版本库的快照，其实就是指向某个commit的指针，和分支相似，但分支可以移动，而标签不能。</p><p>tag与commit的关系，就类似与域名与IP地址的关系，</p><h5 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h5><p>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个<code>commit id</code>；</p><p>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</p><p>命令<code>git tag</code>可以查看所有标签。</p><h5 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h5><p>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</p><p>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</p><p>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</p><p>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</p><h4 id="自定义Git"><a href="#自定义Git" class="headerlink" title="自定义Git"></a>自定义Git</h4><h5 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h5><p>忽略某些文件时，需要编写<code>.gitignore</code>；</p><p><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理！</p><h5 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h5><p>将checkout,commit,branch简写成co,ci,br，可以执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.co checkout</span><br><span class="line">$ git config --global alias.ci commit</span><br><span class="line">$ git config --global alias.br branch</span><br></pre></td></tr></table></figure><h5 id="如何搭建Git服务器"><a href="#如何搭建Git服务器" class="headerlink" title="如何搭建Git服务器"></a>如何搭建Git服务器</h5><p>搭建Git服务器需要准备一台运行Linux的机器。然后：</p><p>第一步，安装git：</p><p><code>$ sudo apt-get install git</code></p><p>第二步，创建一个git用户，用来运行git服务：</p><p><code>$ sudo adduser git</code></p><p>第三步，创建证书登录：</p><p>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p><p>第四步，初始化Git仓库：</p><p>先选定一个目录作为Git仓库，假定是<code>/srv/sample.git</code>，在<code>/srv</code>目录下输入命令：</p><p><code>$ sudo git init --bare sample.git</code></p><p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。然后，把owner改为git：</p><p><code>$ sudo chown -R git:git sample.git</code></p><p>第五步，禁用shell登录：</p><p>出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑<code>/etc/passwd</code>文件完成。找到类似下面的一行：</p><p><code>git:x:1001:1001:,,,:/home/git:/bin/bash</code></p><p>改为：</p><p><code>git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</code></p><p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p><p>第六步，克隆远程仓库：</p><p>现在，可以通过<code>git clone</code>命令克隆远程仓库了，在各自的电脑上运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@server:/srv/sample.git</span><br><span class="line">Cloning into &apos;sample&apos;...</span><br><span class="line">warning: You appear to have cloned an empty repository.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;人生苦短，我用Git&quot;&gt;&lt;a href=&quot;#人生苦短，我用Git&quot; class=&quot;headerlink&quot; title=&quot;人生苦短，我用Git&quot;&gt;&lt;/a&gt;人生苦短，我用Git&lt;/h3&gt;&lt;h4 id=&quot;Git背景介绍&quot;&gt;&lt;a href=&quot;#Git背景介绍&quot; class
      
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="Github" scheme="http://yoursite.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript笔记</title>
    <link href="http://yoursite.com/2019/02/28/JavaScript%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/02/28/JavaScript笔记/</id>
    <published>2019-02-28T14:51:03.000Z</published>
    <updated>2019-02-28T14:58:24.955Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript与Java的关系仅是语法相似，无其他任何关系，主要用于网页动态设计和交互。其国际标准为ECMAScript，最新标准ES6.</p><h3 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h3><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><ul><li>JavaScript代码可以直接放在网页的任何地方，但一般将其放在<code>&lt;head&gt;</code>中。即<code>&lt;html&gt;&lt;head&gt;&lt;script&gt;...&lt;/script&gt;&lt;/head&gt;&lt;body&gt;...&lt;/body&gt;&lt;/html&gt;</code>这种结构。</li><li>也可将JavaScript代码放在单独的.js文件中，然后通过<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>引入该文件。</li><li>可以在同一个页面引用多个.js文件，也可以在页面中多次编写<code>&lt;script&gt;js代码...&lt;/script&gt;</code>，浏览器按顺序执行。</li><li>编写工具：<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>/<a href="http://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a>/<a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++</a></li><li>调试方法：Chrome的console</li></ul><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><ul><li>语法与Java类似，每个语句以<code>;</code>结束，语句块用<code>{...}</code>，注意<code>;</code>不是强制要求，浏览器中的JavaScript引擎会自动在语句结尾补齐<code>;</code>，建议自己加<code>;</code></li><li><code>{...}</code>内的语句具有缩进，有助于理解，此外<code>{...}</code>可以嵌套形成层级结构，但过多的层级会增加看懂代码的难度，通用做法是把部分代码抽出来作为函数来调用，减少代码的复杂度。</li><li><code>//</code>:行注释， <code>/*...*/</code>：块注释</li><li>JavaScript严格区分大小写</li></ul><h4 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h4><ul><li>数字。JavaScript不区分整数和浮点数，统一用Number表示。一般用16进制表示整数，如<code>0xa5b4c3d2</code>，Number可以直接做四则运算，规则与数学一致。</li><li>字符串。以<code>&#39;&#39;</code>或<code>&quot;&quot;</code>括起来的任意文本。注，这里的引号不是字符串的一部分。</li><li>布尔值。布尔值：<code>true</code>，<code>false</code>。布尔运算：<code>&amp;&amp;</code>-与运算；<code>||</code>-或运算；<code>！</code>-非运算。布尔值常用于条件判断中。</li><li>比较运算符。通过比较运算符得到一个布尔值，JavaScript允许对任意数据类型作比较。（注意：i)有2种比较运算符，<code>==</code>会自动转换数据类型再比较，很多时候会得到奇怪的结果；<code>===</code>不会自动转换，如果数据类型不一致，返回false。因此应坚持使用<code>===</code>。ii)NaN这个特殊的Number与所有其它值都不相等，包括他自己，唯一能判断NaN的方法是<code>isNaN()</code>函数。iii)浮点数在运算中会产生误差，因此比较两个浮点数是否相等只能计算他们之差的绝对值，看是否小于某个阈值）</li><li>null和undefined。null表示空，undefined表示值未定义。大多数情况下应该用null，undefined仅仅在判断函数参数是否传递的情况下有用。</li><li>数组。JavaScript的数组可以包括任意数据类型，是一组按顺序排列的集合，数组用<code>[]</code>表示，元素用，分隔，创建数组也可用<code>Array()</code>函数实现，但建议用<code>[]</code>直接生成数组。</li><li>对象。JavaScript的对象是一组由键-值组成的无序集合，对象的键都是字符串类型，值可以是任意数据类型。每个键又称为对象的属性，获取对象的属性通过<code>‘对象变量.属性名’</code>的方式。</li><li>变量。变量可以是任意数据类型，变量名是大小写英文、数字、$和_的组合，且不能数字开头。变量名不能是JavaScript的关键字，声明变量用var语句，赋值用=，同一个变量可以反复赋值，而且可以是不同类型的变量，但是注意只能用var声明一次，因此JavaScript属于动态语言。</li><li>strict模式。如果一个变量没有通过var声明就被使用，那么该变量自动被声明为全局变量。strict模式下代码强制通过var声明变量，未使用var声明变量就使用的将导致错误。启用strict模式的方法是在JavaScript代码第一行写上<code>&#39;use strict&#39;</code>;</li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><ul><li>多行字符串。由于多行字符串用\n写比较麻烦，ES6中新增了反引号法，即<code>...</code>;</li><li>模板字符串。+可以拼接字符串，ES6中新增<code>字符串{不带引号}, ${变量名}, __${}__</code>;的方式实现字符串拼接。</li><li>操作字符串。<code>变量名.length</code>;返回字符串长度。字符串是不可变的，对某个索引赋值，不会报错，但也无任何作用。</li><li>字符串的常用方法。注：调用这些方法不会改变原有字符串内容，而是返回一个新字符串。<code>变量名.toUpperCase()</code>;–全部变大写；<code>变量名.toLowerCase()</code>;–全部变小写；<code>变量名.indexOf(&#39;指定字符串&#39;)</code>;–返回指定字符串的位置，若无则-1；<code>变量名.substring(x, y)</code>;–返回指定区间的字串，注意[x,y)。substring(x);表示从x到最后。</li><li>注：字符串越界显示为空（.substring()），数组越界显示为[]，（.slice()）。</li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li>直接给Array的length赋一个新值会导致Array大小的变化。对Array的索引赋值会直接修改Array。通过索引赋值时，若索引超出了范围，同样会引起Array大小的变化。不建议直接修改Array的大小，访问索引时确保不越界。</li><li>indexOf。与字符串功能一致。</li><li>slice。类似字符串中的substring()。</li><li>push()–尾部添加若干元素，pop()–删除最后一个元素。空数组pop不会报错，而是返回undefined。</li><li>unshift()–头部添加若干元素，shift()–删除第一个元素。空数组shift不会报错，返回undefined。</li><li>sort()–数组排序。</li><li>reverse()–数组反转。</li><li>splice()–修改Array的万能法，可从指定索引开始删除若干元素，然后再从该位置添加若干元素。（案例：从2开始删3个，再加2个：<code>arr.splice(2, 3, &#39;qw&#39;, &#39;eqwe&#39;)</code>；只删除不添加：<code>arr.splice(2,2)</code>；只添加不删除：<code>arr.splice(2, 0, &#39;dda&#39;, &#39;eeasd&#39;)</code>）</li><li>concat()。连接2个数组，返回一个新的数组。concat()方法并没有修改当前数组，而是返回一个新的数组。注：concat()方法可以接收任意个元素和数组，并且自动把数组拆开，然后再添加到新数组中。（如：<code>var arr=[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;]</code>; <code>arr.concat(1,2,[3,4])</code>; 返回的是<code>[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,1,2,3,4]</code>）。</li><li>join()。把数组中的每个元素用指定的字符串连接起来，然后返回连接后的字符串。若数组的元素不是字符串，则自动转换为字符串后再连接。</li><li>多维数组。即数组的元素中也包含数组。索引按嵌套方式。如：<code>arr[2][2]</code>。</li></ul><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><ul><li>JavaScript的对象是一种无序的集合数据类型，由若干键值对组成，用于描述现实世界中的某个对象。</li><li>JavaScript用一个<code>{...}</code>表示一个对象，键值对以<code>xxx: xxx</code>形式申明，用<code>,</code>隔开，最后一个键值对不要加<code>,</code>。访问属性通过.操作符完成，但要求属性名必须是一个有效的变量名，若属性名包含特殊字符，就必须用’’括起来。这种情况下访问时必须用对象名<code>[&#39;xxx&#39;]</code>，而不能用对象名.属性了。注意：访问不存在的属性会返回undefined。</li><li>由于JavaScript是动态类型的，因此可以自由地给一个对象添加或删除属性，检测对象是否拥有某一属性，可以用in操作符。注：in判断属性存在，该属性不一定是对象的，可能是该对象继承得来的，因此判断属性是否是对象自身拥有的而非继承，可以用<code>hasOwnProperty()</code>方法。</li></ul><h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><ul><li>JavaScript使用<code>if () {...} else {...}</code>来进行条件判断，建议{}不要省略。</li><li>多重条件判断，<code>if () {...} else if () {...} else {...}</code>。</li><li>JavaScript把null，undefined，0，NaN和’’视为false，其他均为true。</li></ul><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><ul><li>JavaScript的循环有2种，一种是for循环，通过初始条件、结束条件和递增条件来循环执行语句块。如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var x = 0; </span><br><span class="line">var i; </span><br><span class="line">for (i=1; i&lt;=10000; i++) </span><br><span class="line">&#123; </span><br><span class="line">    x = x + i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for循环最常用于利用索引遍历数组。for循环的3个条件都是可以省略的，如果没有退出循环的判断条件，必须使用break语句退出循环，否则就是死循环。</li><li><code>for ... in</code>。是for循环的一个变体，可以把一个对象的所有属性依次循环出来。要过滤掉对象继承的属性，用<code>hasOwnProperty()</code>来实现。由于数组也是对象，而他的每个元素的索引被视为对象的属性，因此for…in循环可以直接循环出数组的索引。注：for…in对数组的循环得到的是String而不是Number。如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]; </span><br><span class="line">for (var i in a) </span><br><span class="line">&#123; </span><br><span class="line">    console.log(i); </span><br><span class="line">    console.log(a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>while。while循环只有一个判断条件，条件满足，就不断循环。<code>while () {...}</code></li><li><code>do...while</code>。它和while的唯一区别是不是在每次循环开始时判断条件，而是在每次循环完成的时候判断条件。注意，该循环至少执行一次而for和while循环则可能一次都不执行。<code>do {...} while ()</code>;</li></ul><h4 id="Map和Set"><a href="#Map和Set" class="headerlink" title="Map和Set"></a>Map和Set</h4><ul><li>Map和Set是ES6新增的数据类型，类似于字典。</li><li>Map是一组键值对的结构，具有极快的查找速度。初始化Map需要一个二维数组，或者直接初始化一个空Map，Map具有以下方法。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var m = new Map(); // 空Map </span><br><span class="line">m.set(&apos;Adam&apos;, 67); // 添加新的key-value </span><br><span class="line">m.set(&apos;Bob&apos;, 59); </span><br><span class="line">m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;: true </span><br><span class="line">m.get(&apos;Adam&apos;); // 67 </span><br><span class="line">m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos; </span><br><span class="line">m.get(&apos;Adam&apos;); // undefined。</span><br></pre></td></tr></table></figure><p>由于一个key只能对应一个value，所以多次对一个key放入value，后面的值会冲掉前面的值。</p><ul><li>Set和Map类似，也是一组key的集合，但不存储value，在Set中，没有重复的key。重复元素在Set中自动被过滤。通过add(key)方法可以添加元素，通过<code>delete(key)</code>方法删除元素。</li></ul><h4 id="iterable"><a href="#iterable" class="headerlink" title="iterable"></a>iterable</h4><ul><li>遍历Array可以使用下标，遍历Map和Set无法使用下标，为了统一集合类型，ES6引入了iterable类型，Array,Map,Set都属于iterable类型，具有iterable类型的集合可以通过新的for…of循环来遍历。</li><li>for…of的用法。 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]; </span><br><span class="line">var s = new Set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]); </span><br><span class="line">var m = new Map([[1, &apos;x&apos;], [2, &apos;y&apos;], [3, &apos;z&apos;]]); </span><br><span class="line">for (var x of a) &#123; </span><br><span class="line">    // 遍历Array console.log(x);</span><br><span class="line">    &#125; </span><br><span class="line">for (var x of s) &#123; </span><br><span class="line">    // 遍历Set console.log(x);</span><br><span class="line">    &#125; </span><br><span class="line">for (var x of m) &#123; </span><br><span class="line">    // 遍历Map console.log(x[0] + &apos;=&apos; + x[1]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for…in和for…of的区别。for…in会把新增的属性包括在内 ，而Array的length却不包括在内。for…of只循环集合本身的元素。</li><li>更好的方式是直接使用iterable内置的forEach方法，它接收一个函数，每次迭代就自动回调该函数。方法如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]; </span><br><span class="line">a.forEach(function (element, index, array) </span><br><span class="line">&#123;</span><br><span class="line">    console.log(element + &apos;, index = &apos; + index);</span><br><span class="line">    &#125;);     </span><br><span class="line">var s = new Set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]); </span><br><span class="line">s.forEach(function (element, sameElement, set) </span><br><span class="line">&#123;</span><br><span class="line">    console.log(element);</span><br><span class="line">    &#125;); </span><br><span class="line">var m = new Map([[1, &apos;x&apos;], [2, &apos;y&apos;], [3, &apos;z&apos;]]); </span><br><span class="line">m.forEach(function (value, key, map) </span><br><span class="line">&#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>JavaScript的函数调用不要求参数必须一致，因此可以忽略不感兴趣的参数，如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]; </span><br><span class="line">a.forEach(function (element) </span><br><span class="line">&#123;</span><br><span class="line">    console.log(element);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="函数篇"><a href="#函数篇" class="headerlink" title="函数篇"></a>函数篇</h3><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><ul><li>几乎所有的高级语言都支持函数，JavaScript的函数不仅是“头等公民”，而且像可以变量一样使用，具有非常强的抽象能力。</li></ul><h4 id="函数定义和调用"><a href="#函数定义和调用" class="headerlink" title="函数定义和调用"></a>函数定义和调用</h4><ul><li>定义函数。以下2种方式等价。因为函数实际上也是一个函数对象，函数名可以视为指向该函数的变量。注意第2种表述结尾的;</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function abs(x) &#123;</span><br><span class="line">    if (x &gt;= 0) &#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var abs = function (x) &#123;</span><br><span class="line">    if (x &gt;= 0) &#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>调用函数。调用函数时按顺序传入参数即可，传入的参数比定义的多或者少都没有问题，少的话，函数参数将收到undefined，计算结果为NaN。避免这种结果可采用“检查”，即：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function abs(x) &#123;</span><br><span class="line">    if (typeof x !== &apos;number&apos;) &#123;</span><br><span class="line">        throw &apos;Not a number&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    if (x &gt;= 0) &#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>arguments。该关键字只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数，arguments类似Array但不是一个Array。常用于判断传入参数的个数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// foo(a[, b], c)</span><br><span class="line">// 接收2~3个参数，b是可选参数，如果只传2个参数，b默认为null：</span><br><span class="line">function foo(a, b, c) &#123;</span><br><span class="line">    if (arguments.length === 2) &#123;</span><br><span class="line">        // 实际拿到的参数是a和b，c为undefined</span><br><span class="line">        c = b; // 把b赋给c</span><br><span class="line">        b = null; // b变为默认值</span><br><span class="line">    &#125;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>rest参数。由于JavaScript函数允许接收人一个参数，因此不得不用arguments来获取所有参数，以下2种方式可以达到一样的效果。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function foo(a, b) &#123;</span><br><span class="line">    var i, rest = [];</span><br><span class="line">    if (arguments.length &gt; 2) &#123;</span><br><span class="line">        for (i = 2; i&lt;arguments.length; i++) &#123;</span><br><span class="line">            rest.push(arguments[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&apos;a = &apos; + a);</span><br><span class="line">    console.log(&apos;b = &apos; + b);</span><br><span class="line">    console.log(rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function foo(a, b, ...rest) &#123;</span><br><span class="line">    console.log(&apos;a = &apos; + a);</span><br><span class="line">    console.log(&apos;b = &apos; + b);</span><br><span class="line">    console.log(rest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(1, 2, 3, 4, 5);</span><br></pre></td></tr></table></figure><p>注：若传入的参数连正常定义的参数也未填满，rest参数会接收1个空数组，而不是undefined。</p><ul><li>return语句不要换行，即return不要和后面的语句换行，否则会自动在return后加;，如要换行，请在return后加{。</li></ul><h4 id="变量作用域与解构赋值"><a href="#变量作用域与解构赋值" class="headerlink" title="变量作用域与解构赋值"></a>变量作用域与解构赋值</h4><ul><li>var申明的变量实际上是有作用域的。如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，函数体外不可引用该变量。如果2个不同的函数各自申明了同一个变量，该变量只在各自的函数体内起作用，相互独立。嵌套函数中内部函数可以访问外部函数定义的变量，反之则不行。如果内部函数定义了和外部函数重名的变量，则内部函数的变量将屏蔽外部函数的变量。</li><li>变量提升。函数的特点之一是它会先扫描整个函数体的语句，把所有申明的变量提升到函数的顶部。因此，编码过程中应遵循“在函数内部首先申明所有变量”这一规则。注意：提升的是申明而不是赋值。</li><li>全局作用域。不在任何函数内定义的变量就具有全局作用域。JavaScript默认的一个全局对象是window，全局作用域的变量实际上被绑定到了window的一个属性。也即JavaScript实际上只有一个全局作用域。任何变量由下往上查找。</li><li>名字空间。全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 唯一的全局变量MYAPP:</span><br><span class="line">var MYAPP = &#123;&#125;;</span><br><span class="line">// 其他变量:</span><br><span class="line">MYAPP.name = &apos;myapp&apos;;</span><br><span class="line">MYAPP.version = 1.0;</span><br><span class="line">// 其他函数:</span><br><span class="line">MYAPP.foo = function () &#123;</span><br><span class="line">    return &apos;foo&apos;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>局部作用域。在for循环等语句块中无法定义具有局部作用域的变量，因此ES6引入关键字let，用let替代var可以申明一个块级作用域的变量。let的变量仅作用于循环内部。</li><li>常量。ES6以前，用全部大写的变量来表示常量，ES6引入关键字const定义常量，const也具有块级作用域。</li><li>解构赋值。可以同时对一组变量进行赋值。<br>对数组进行解构赋值时，多个变量要用<code>[...]</code>括起来。</li></ul><p><code>var [x, y, z] = [&#39;hello&#39;, &#39;JavaScript&#39;, &#39;ES6&#39;];</code></p><p>如果数组本身有嵌套，通过相同结构赋值，嵌套层次和位置要保持一致。</p><p><code>let [x, [y, z]] = [&#39;hello&#39;, [&#39;JavaScript&#39;, &#39;ES6&#39;]];</code></p><p>解构赋值可以忽略某些元素。</p><p><code>let [, , z] = [&#39;hello&#39;, &#39;JavaScript&#39;, &#39;ES6&#39;];</code></p><p>如果需要从一个对象中取出若干属性，也可以使用解构赋值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    name: &apos;小明&apos;,</span><br><span class="line">    age: 20,</span><br><span class="line">    gender: &apos;male&apos;,</span><br><span class="line">    passport: &apos;G-12345678&apos;,</span><br><span class="line">    school: &apos;No.4 middle school&apos;</span><br><span class="line">&#125;;</span><br><span class="line">var &#123;name, age, passport&#125; = person;</span><br></pre></td></tr></table></figure><p>对一个对象进行解构赋值时，同样可以直接对嵌套的对象属性进行赋值，只要保证对应的层次一致。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    name: &apos;小明&apos;,</span><br><span class="line">    age: 20,</span><br><span class="line">    gender: &apos;male&apos;,</span><br><span class="line">    passport: &apos;G-12345678&apos;,</span><br><span class="line">    school: &apos;No.4 middle school&apos;,</span><br><span class="line">    address: &#123;</span><br><span class="line">        city: &apos;Beijing&apos;,</span><br><span class="line">        street: &apos;No.1 Road&apos;,</span><br><span class="line">        zipcode: &apos;100001&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var &#123;name, address: &#123;city, zip&#125;&#125; = person;</span><br></pre></td></tr></table></figure><p>使用解构赋值对对象属性进行赋值时，如果对应的属性不存在，变量被赋值为undefined，如果要使用的变量名和属性名不一致，可通过下面语法获取：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    name: &apos;小明&apos;,</span><br><span class="line">    age: 20,</span><br><span class="line">    gender: &apos;male&apos;,</span><br><span class="line">    passport: &apos;G-12345678&apos;,</span><br><span class="line">    school: &apos;No.4 middle school&apos;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 把passport属性赋值给变量id:</span><br><span class="line">let &#123;name, passport:id&#125; = person;</span><br><span class="line">name; // &apos;小明&apos;</span><br><span class="line">id; // &apos;G-12345678&apos;</span><br><span class="line">// 注意: passport不是变量，而是为了让变量id获得passport属性:</span><br><span class="line">passport; // Uncaught ReferenceError: passport is not defined</span><br></pre></td></tr></table></figure><p>解构赋值还可以使用默认值，避免不存在的属性返回undefined。<br>有时候，如果变量已经被申明，再次赋值时正确的写法也会报错，是因为JavaScript引擎将{开头的语句当块处理了，所以=不在合法，解决方案是用()括起来，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 声明变量:</span><br><span class="line">var x, y;</span><br><span class="line">// 解构赋值:</span><br><span class="line">&#123;x, y&#125; = &#123; name: &apos;小明&apos;, x: 100, y: 200&#125;;</span><br><span class="line">// 语法错误: Uncaught SyntaxError: Unexpected token =</span><br><span class="line"></span><br><span class="line">(&#123;x, y&#125; = &#123; name: &apos;小明&apos;, x: 100, y: 200&#125;);</span><br></pre></td></tr></table></figure><ul><li>使用场景。常用于简化代码。如交换2个变量的值，快速获取当前页面的域名和路径等。注意：解构赋值特性是ES6支持的。</li></ul><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>在一个对象中绑定函数，称为这个对象的方法。绑定到对象上的函数称为方法，和普通函数没什么区别，但它在内部使用了this关键字，它是一个特殊变量，始终指向当前对象。注：JS的设计错误–如果一对象的方法形式调用，该函数的this指向被调用的对象，如果单独调用函数，此时this只想全局对象，即window。即要保证this指向正确，必须用obj.xxx()的形式调用。在strict模式下this指向undefined。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var xiaoming = &#123;</span><br><span class="line">    name: &apos;小明&apos;,</span><br><span class="line">    birth: 1990,</span><br><span class="line">    age: function () &#123;</span><br><span class="line">        var y = new Date().getFullYear();</span><br><span class="line">        return y - this.birth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age; // function xiaoming.age()</span><br><span class="line">xiaoming.age(); // 今年调用是25,明年调用就变成26了</span><br></pre></td></tr></table></figure><ul><li>函数内部的函数的this指向undefined，修复的方法是在外函数内var that=this捕获this，然后在内函数中使用that代替this。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var xiaoming = &#123;</span><br><span class="line">    name: &apos;小明&apos;,</span><br><span class="line">    birth: 1990,</span><br><span class="line">    age: function () &#123;</span><br><span class="line">        var that = this; // 在方法内部一开始就捕获this</span><br><span class="line">        function getAgeFromBirth() &#123;</span><br><span class="line">            var y = new Date().getFullYear();</span><br><span class="line">            return y - that.birth; // 用that而不是this</span><br><span class="line">        &#125;</span><br><span class="line">        return getAgeFromBirth();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age(); // 25</span><br></pre></td></tr></table></figure><ul><li>apply。要指定函数的this指向哪个对象，可以用函数本身的apply方法，他接收2个参数，第一个参数是要绑定的this变量，第二个参数时Array，表示函数本身的参数。另一个与apply()类似的方法是call()，唯一区别是apply()把参数打包成Array再传入，call()把参数按顺序传入。对普通函数调用，通常把this绑定为null。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function getAge() &#123;</span><br><span class="line">    var y = new Date().getFullYear();</span><br><span class="line">    return y - this.birth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var xiaoming = &#123;</span><br><span class="line">    name: &apos;小明&apos;,</span><br><span class="line">    birth: 1990,</span><br><span class="line">    age: getAge</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">xiaoming.age(); // 25</span><br><span class="line">getAge.apply(xiaoming, []); // 25, this指向xiaoming, 参数为空</span><br></pre></td></tr></table></figure><ul><li>装饰器。可以利用apply()动态改变函数的行为。JS的所有对象都是动态的，即使是内置的函数，我们也可以重新指向新的函数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">var count = 0;</span><br><span class="line">var oldParseInt = parseInt; // 保存原函数</span><br><span class="line"></span><br><span class="line">window.parseInt = function () &#123;</span><br><span class="line">    count += 1;</span><br><span class="line">    return oldParseInt.apply(null, arguments); // 调用原函数</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><p>由于变量可以指向函数，函数的参数能接收变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称为高阶函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function add(x, y, f) &#123;</span><br><span class="line">    return f(x) + f(y);</span><br><span class="line">&#125;</span><br><span class="line">var x = add(-5, 6, Math.abs); // 11</span><br><span class="line">console.log(x);</span><br></pre></td></tr></table></figure><h5 id="map-reduce"><a href="#map-reduce" class="headerlink" title="map/reduce"></a>map/reduce</h5><ul><li>map。map()作为高阶函数，把运算规则抽象了。如：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">function pow(x) &#123;</span><br><span class="line">    return x * x;</span><br><span class="line">&#125;</span><br><span class="line">var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];</span><br><span class="line">var results = arr.map(pow); // [1, 4, 9, 16, 25, 36, 49, 64, 81]</span><br><span class="line">console.log(results);</span><br></pre></td></tr></table></figure><ul><li>reduce。利用reduce()求积。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">function product(arr) &#123;</span><br><span class="line">    return arr.reduce(function(x,y) &#123;return x*y;&#125;);</span><br></pre></td></tr></table></figure><ul><li>利用map和reduce实现string2int()函数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">function string2int(s) &#123;</span><br><span class="line">    var arr=s.split(&apos;&apos;);</span><br><span class="line">    arr=arr.map(function(x) &#123;return x*1;&#125;);</span><br><span class="line">    return arr.reduce(function(x,y) &#123;return x*10+y;&#125;);</span><br></pre></td></tr></table></figure><ul><li>首字母大写。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">function normalize(arr) &#123;</span><br><span class="line">    return arr.map(function (s) &#123;</span><br><span class="line">        return s[0].toUpperCase() + s.substring(1,s.length).toLowerCase();&#125;);</span><br></pre></td></tr></table></figure><ul><li>字符串变整数。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">var arr = [&apos;1&apos;, &apos;2&apos;, &apos;3&apos;];</span><br><span class="line">var r;</span><br><span class="line">r = arr.map(Number);</span><br><span class="line">console.log(r);</span><br></pre></td></tr></table></figure><h5 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h5><ul><li></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript与Java的关系仅是语法相似，无其他任何关系，主要用于网页动态设计和交互。其国际标准为ECMAScript，最新标准ES6.&lt;/p&gt;
&lt;h3 id=&quot;入门篇&quot;&gt;&lt;a href=&quot;#入门篇&quot; class=&quot;headerlink&quot; title=&quot;入门篇&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="网页" scheme="http://yoursite.com/tags/%E7%BD%91%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>markdown基本语法</title>
    <link href="http://yoursite.com/2019/02/26/markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2019/02/26/markdown基本语法/</id>
    <published>2019-02-26T15:05:37.000Z</published>
    <updated>2019-02-27T15:21:40.038Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h3><p>Markdown是一种类似于HTML的标记语言，HTML由一对一对的标签组成，而Markdown则使用各种简单符号定义文本的类型，简单易学，让我们一起来开始吧。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>标题一共有6种，分别用1-6个#标记，类比HTML中的h1-h6。</p><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>常用字体主要就是粗体，斜体之类啦。</p><pre><code>*我是斜体***我是粗体*****我是粗斜体，嘿嘿***~~我是被删除的根号三~~</code></pre><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>引用以&gt;开头，&gt;的多少影响的是引用的标记的长短，不信你看。</p><pre><code>&gt; 我被标记了&gt;&gt; 我也被标记了&gt;&gt;&gt; 别说了，我也是</code></pre><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接的个是比较固定，语法如下：</p><pre><code>[链接名称](连接的地址)</code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片与链接类似，之在前面多了一个!而已。</p><pre><code>![图片名称](图片地址)</code></pre><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>分割线可用不少于3个*，-来标记，数量多少无明显差异，但是不能混用哦。</p><pre><code>--------****</code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表分为有序列表和无序列表，有序的如1,2,3等，无序的通常前面加个断点记号+，-，*等。</p><pre><code>&lt;!-- 有序列表 --&gt;1. 科学2. 文化3. 哲学&lt;!-- 无序列表 --&gt;+ 科学+ 文化&lt;!-- 列表嵌套 --&gt;1. 科学    - 天文    - 地理    - 物理2. 文化    - 儒家    - 道家    - 释家</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>代码分为单行代码（如某些安装命令）和多行代码块（函数，循环等），分别用特殊符号引起来即可。当然，你也可以先写完，然后全部缩进一个TAB，也是一样的效果。</p><pre><code>`我是一行代码`<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我是好多代码</span><br></pre></td></tr></table></figure></code></pre><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格稍微复杂一点，你可以把它看成几行几列的矩阵，填满每个格子即可，第一行是表头，一行一行描述即可。如下，第二行是用于分隔表头和内容的，此外，在此处可以定义文字的对齐方式，默认是左对齐，在-的右边加:则为右对齐，-的两边都加:则为居中，每一列的对齐方式都可以不同。</p><pre><code>表头|表头|表头-|-|-内容|内容|内容内容|内容|内容内容|内容|内容</code></pre><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>不常用，很多编辑器也不支持，了解即可。</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">&amp;</span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;说在前面&quot;&gt;&lt;a href=&quot;#说在前面&quot; class=&quot;headerlink&quot; title=&quot;说在前面&quot;&gt;&lt;/a&gt;说在前面&lt;/h3&gt;&lt;p&gt;Markdown是一种类似于HTML的标记语言，HTML由一对一对的标签组成，而Markdown则使用各种简单符号定义文本的
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="写作" scheme="http://yoursite.com/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>如何使用HEXO搭建个人博客</title>
    <link href="http://yoursite.com/2019/02/18/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/02/18/如何使用HEXO搭建个人博客/</id>
    <published>2019-02-18T13:03:36.000Z</published>
    <updated>2019-02-26T13:41:21.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="搭建博客到本地"><a href="#搭建博客到本地" class="headerlink" title="搭建博客到本地"></a>搭建博客到本地</h3><ol><li>下载 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>，并安装。</li><li>下载 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>， 并安装。</li><li><p>安装Hexo。<br> a. 搭建Hexo的环境，在Git Bash中运行以下命令：<br> <code>npm install -g hexo -cli</code><br> b. 初始化Hexo，在Git Bash中运行以下命令：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p> <folder>即为存放Hexo初始化文件的路径，也即站点目录。新建之后在路径下会产生一些文件。<br> c. 启动服务器。在该路径下，使用Git Bush(即先定位到../../folder，然后右键Git Bash Here)，运行以下命令：<br> <code>hexo s</code><br> d. 此时访问网址：<code>http://localhost:4000</code> 本地的博客已搭建成功。</folder></p></li></ol><h3 id="将博客搭建到GitHub"><a href="#将博客搭建到GitHub" class="headerlink" title="将博客搭建到GitHub"></a>将博客搭建到GitHub</h3><p>本地的博客只能本机访问，要想可通过网络访问，可借助GitHub实现。</p><ol><li>创建GitHub账号并登陆。</li><li>创建仓库，仓库名为：&lt;Github账号名称&gt;.github.io</li><li><p>将本地Hexo博客推送到GithubPages<br> a. 安装hexo-deployer-git插件。在Git Bash运行以下命令即可：<br> <code>npm install hexo-deployer-git --save</code><br> b. 添加SSH key。在Git Bash运行以下命令：<br> <code>ssh-keygen -t rsa -C &quot;邮箱地址&quot;</code><br> 添加到GitHub。复制密钥文件内容粘贴到New SSH key。<br> 测试是否添加成功。在Git Bash运行以下命令：出现”you’ve successfully ….”即可。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">yes</span><br></pre></td></tr></table></figure><p> c. 修改站点目录下的配置文件 (_config.yml)。修改文件末尾：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line"> type: git</span><br><span class="line"> repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line"> branch: master</span><br></pre></td></tr></table></figure><p> d. 回到gitbash中，进入你的blog目录，分别执行以下命令：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li><li><p>Hexo博客已经成功搭建在GithubPages, 域名为<code>https://&lt;Github账号名称&gt;.github.io</code>。</p></li></ol><h2 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h2><h3 id="启用Next主题"><a href="#启用Next主题" class="headerlink" title="启用Next主题"></a>启用Next主题</h3><p>前往<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a>选择自己喜欢的主题并下载，复制到站点目录下的<code>themes</code>文件下，然后修改站点目录下的<code>_config.yml</code>文件中的<code>Extensions</code>部分，如下即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: next</span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure></p><h3 id="修改主题为中文"><a href="#修改主题为中文" class="headerlink" title="修改主题为中文"></a>修改主题为中文</h3><p>修改站点目录下的<code>_config.yml</code>文件中的<code>Site</code>部分的language的值，修改为<code>zh-Hans</code>。</p><h3 id="更改标题作者和链接"><a href="#更改标题作者和链接" class="headerlink" title="更改标题作者和链接"></a>更改标题作者和链接</h3><p>修改站点目录下的<code>_config.yml</code>文件中的<code>Site</code>部分的title，subtitle的值，<code>URL</code>中的url的值即可。</p><h3 id="更改主题样式"><a href="#更改主题样式" class="headerlink" title="更改主题样式"></a>更改主题样式</h3><p>修改next主题目录下的<code>_config.yml</code>文件中的<code>Schemes</code>部分，选择某一种主题，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line"># scheme: Muse</span><br><span class="line"># scheme: Mist</span><br><span class="line"># scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure></p><h3 id="增加关于标签分类页"><a href="#增加关于标签分类页" class="headerlink" title="增加关于标签分类页"></a>增加关于标签分类页</h3><p>修改next主题目录下的<code>_config.yml</code>文件中的<code>menu</code>部分，开启about，tags,categories,如下，下略。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home </span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure></p><h3 id="新增页面的正确打开方式"><a href="#新增页面的正确打开方式" class="headerlink" title="新增页面的正确打开方式"></a>新增页面的正确打开方式</h3><p>若现在保存配置文件，然后素质三连<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p>在本地网页上看到的新增的3个页面都为空，且关于页面是404，因此需要一些额外的操作才能使这几个页面生效，此处以标签页为例，首先进到站点目录下的source文件夹下，右键Git Bash输入：<code>hexo n page tags</code><br>此时会发现source文件下多了一个tags文件夹，进去，打开index.md文件，编写其中内容，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2019-02-16 21:25:50</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>此时再打开标签页就会显示暂无标签。</p><h3 id="更改并设置可旋转头像"><a href="#更改并设置可旋转头像" class="headerlink" title="更改并设置可旋转头像"></a>更改并设置可旋转头像</h3><p>启用next主题目录下的<code>_config.yml</code>文件中的<code>avatar</code>，值为头像图片路径，建议将图片都放在：<code>\blog\themes\next\source\images</code>下，如：<code>avatar: /images/luffy.jpg</code></p><p>然后定位到<code>\blog\themes\next\source\css\_common\components\sidebar</code>，编辑<code>sidebar-author.styl</code>文件，修改部分如下，其他部分不变，即可实现头像旋转：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  transition: 2s all;</span><br><span class="line">&#125;</span><br><span class="line">.site-author-image:hover&#123;</span><br><span class="line">    transform: rotate(360deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="启用侧边栏社交链接"><a href="#启用侧边栏社交链接" class="headerlink" title="启用侧边栏社交链接"></a>启用侧边栏社交链接</h3><p>启用next主题目录下的<code>_config.yml</code>文件中的<code>social</code>，启用想增加的社交连接，将链接改为自己的相应网站的个人主页网址即可。</p><h3 id="启用友情链接"><a href="#启用友情链接" class="headerlink" title="启用友情链接"></a>启用友情链接</h3><p>启用next主题目录下的<code>_config.yml</code>文件中的<code>links</code>，按照文件中给的样式增加你想要添加的友情链接。</p><h3 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h3><p>启用next主题目录下的<code>_config.yml</code>文件中的<code>Reward</code>，开启reward_comment，wechatpay，alipay，修改它们的值。第一个表示求打赏的话，第2，3分别是微信，支付宝的付款吗图片。</p><h3 id="开启订阅与RSS"><a href="#开启订阅与RSS" class="headerlink" title="开启订阅与RSS"></a>开启订阅与RSS</h3><p>启用next主题目录下的<code>_config.yml</code>文件中的<code>Wechat Subscriber</code>，下面的4行全部开启，enabled值设为true，qcode的值为个人公众号二维码。</p><p>切换到站点目录下，安装插件<code>npm install --save hexo-generator-feed</code>，然后编辑站点目录下的<code>_config.yml</code>文件中的<code>Extensions</code>，在其下方添加一行代码：<code>plugins: hexo-generate-feed</code>，然后启用next主题目录下的<code>_config.yml</code>文件中的<code>rss</code>，修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Set rss to false to disable feed link.</span><br><span class="line"># Leave rss as empty to use site&apos;s feed link.</span><br><span class="line"># Set rss to specific value if you have burned your feed already.</span><br><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure></p><h3 id="首页文章设置阅读全文"><a href="#首页文章设置阅读全文" class="headerlink" title="首页文章设置阅读全文"></a>首页文章设置阅读全文</h3><p>修改next主题目录下的<code>_config.yml</code>文件中的<code>auto_excerpt</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommend.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure></p><h3 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h3><p>修改next主题目录下的<code>_config.yml</code>文件中的<code>Canvas-nest</code>，默认有4种背景可供选择，将想选的背景的值改为<code>true</code>即可。</p><h3 id="添加fork-GitHub"><a href="#添加fork-GitHub" class="headerlink" title="添加fork GitHub"></a>添加fork GitHub</h3><p>在<a href="https://github.blog/2008-12-19-github-ribbons/" target="_blank" rel="noopener">GitHub Ribbons</a>或<a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">GitHub Corners</a>选择一款你喜欢的挂饰，拷贝方框内的代码，将刚刚复制的挂饰代码，添加到<code>Blog/themes/next/layout/_layout.swig</code>文件中，放在<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下方即可。</p><h3 id="修改文章内链接样式"><a href="#修改文章内链接样式" class="headerlink" title="修改文章内链接样式"></a>修改文章内链接样式</h3><p>打开<code>\blog\themes\next\source\css\_common\components\post\post.styl</code>，在底部添加如下代码，即可实现鼠标移到该链接处字体变紫色的效果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.post-body p a&#123;</span><br><span class="line">    color: #345;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    &amp;:hover&#123;</span><br><span class="line">        color: purple;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="修改文章底部标签"><a href="#修改文章底部标签" class="headerlink" title="修改文章底部标签"></a>修改文章底部标签</h3><p>打开<code>\blog\themes\next\layout\_macro\post.swig</code>，修改第359行，将<code>#</code>替换成其他图标，可以在<code>http://www.fontawesome.com.cn/faicons/</code>寻找你想要的图标，如此出我们将<code>#</code>替换成了<code>&lt;i class=&quot;fa fa-tag&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;footer class=&quot;post-footer&quot;&gt;</span><br><span class="line">  &#123;% if post.tags and post.tags.length and not is_index %&#125;</span><br><span class="line">    &lt;div class=&quot;post-tags&quot;&gt;</span><br><span class="line">      &#123;% for tag in post.tags %&#125;</span><br><span class="line">        &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt;</span><br><span class="line">      &#123;% endfor %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><h3 id="增加来必力评论系统"><a href="#增加来必力评论系统" class="headerlink" title="增加来必力评论系统"></a>增加来必力评论系统</h3><p>注册并登陆<a href="https://www.livere.com/" target="_blank" rel="noopener">来必力</a>获取你的LiveRe UID。填写LiveRe UID到主题配置文件_config.yml的<code>livere_uid</code>即可。</p><h3 id="增加本地搜索功能"><a href="#增加本地搜索功能" class="headerlink" title="增加本地搜索功能"></a>增加本地搜索功能</h3><p>安装插件，在站点的根目录下执行以下命令：<code>npm install hexo-generator-searchdb --save</code>，然后在站点配置文件中添加以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># local_search</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></p><p>然后启用主题目录下的配置文件中的<code>local_search</code>，值改为<code>true</code>即可。</p><h3 id="增加不蒜子统计功能"><a href="#增加不蒜子统计功能" class="headerlink" title="增加不蒜子统计功能"></a>增加不蒜子统计功能</h3><p>编辑主题配置文件中的<code>busuanzi_count</code>的配置项即可。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Show PV/UV of the website/page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: true</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: 本站访客数 &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt;</span><br><span class="line">  site_uv_footer: 人次</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: 本站总访问量 &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt;</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: true</span><br><span class="line">  page_pv_header: 本文总阅读量 &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt;</span><br><span class="line">  page_pv_footer: 次</span><br></pre></td></tr></table></figure></p><p>然后找到主题调用不蒜子的swig文件。一般在<code>”\themes*\layout_third-party\analytics\busuanzi-counter.swig”</code>，将原域名<code>dn-lbstatics.qbox.me/</code>改为<code>busuanzi.ibruce.info/</code>。</p><h3 id="增加内容分享服务"><a href="#增加内容分享服务" class="headerlink" title="增加内容分享服务"></a>增加内容分享服务</h3><p>开启主题配置文件的<code>jiathis</code>，增加值为<code>true</code>即可。</p><h3 id="增加加载效果"><a href="#增加加载效果" class="headerlink" title="增加加载效果"></a>增加加载效果</h3><p>开启主题配置文件的<code>pace</code>，值改为<code>true</code>，下面的list是所有的加载样式，选择其一复制到<code>pace_theme</code>即可。</p><h3 id="显示当前浏览进度"><a href="#显示当前浏览进度" class="headerlink" title="显示当前浏览进度"></a>显示当前浏览进度</h3><p>修改主题配置文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Back to top in sidebar (only for Pisces | Gemini).</span><br><span class="line">b2t: true</span><br><span class="line"></span><br><span class="line"># Scroll percent label in b2t button.</span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure></p><h3 id="增加鼠标点击特效"><a href="#增加鼠标点击特效" class="headerlink" title="增加鼠标点击特效"></a>增加鼠标点击特效</h3><p>在<code>/themes/next/source/js/src</code>下新建文件<code>clicklove.js</code>，接着把以下粘贴到<code>clicklove.js</code>文件中。代码如下：</p><p><code>!function(e,t,a){function n(){c(&quot;.heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: &#39;&#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}&quot;),o(),r()}function r(){for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)}function o(){var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e){t&amp;&amp;t(),i(e)}}function i(e){var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)}function s(){return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);</code></p><p>然后在<code>\themes\next\layout\_layout.swig</code>文件末尾添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="隐藏底部的强力驱动"><a href="#隐藏底部的强力驱动" class="headerlink" title="隐藏底部的强力驱动"></a>隐藏底部的强力驱动</h3><p>找到<code>\blog\themes\next\layout\_partials\footer.swig</code>，注释掉24-41行这段代码即可。</p><h3 id="增加字数统计和阅读时长功能"><a href="#增加字数统计和阅读时长功能" class="headerlink" title="增加字数统计和阅读时长功能"></a>增加字数统计和阅读时长功能</h3><p>先在站点目录下安装插件<code>npm install hexo-wordcount --save</code>，然后修改主题配置文件相应部分：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  totalcount: false</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure></p><h3 id="添加二次元生物"><a href="#添加二次元生物" class="headerlink" title="添加二次元生物"></a>添加二次元生物</h3><p>其实就是在博客中添加Live 2D模型。首先安装插件：</p><pre><code>npm install --save hexo-helper-live2d</code></pre><p>然后下载模型文件，可在<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">此处</a>选择你喜欢的模型：</p><pre><code>npm install live2d-widget-model-shizuku</code></pre><p>然后在站点配置文件和主题配置文件中添加以下配置：</p><pre><code>live2d:  enable: true  scriptFrom: local  pluginRootPath: live2dw/  pluginJsPath: lib/  pluginModelPath: assets/  tagMode: false  debug: false  model:    use: live2d-widget-model-shizuku  display:    position: right    width: 150    height: 300  mobile:    show: true</code></pre><p>注：model: use的值为你选择的模型名称，模型名称必须是你已下载的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;搭建环境&quot;&gt;&lt;a href=&quot;#搭建环境&quot; class=&quot;headerlink&quot; title=&quot;搭建环境&quot;&gt;&lt;/a&gt;搭建环境&lt;/h2&gt;&lt;h3 id=&quot;搭建博客到本地&quot;&gt;&lt;a href=&quot;#搭建博客到本地&quot; class=&quot;headerlink&quot; title=&quot;搭建博
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="分享" scheme="http://yoursite.com/tags/%E5%88%86%E4%BA%AB/"/>
    
      <category term="DIY" scheme="http://yoursite.com/tags/DIY/"/>
    
  </entry>
  
  <entry>
    <title>测试文章</title>
    <link href="http://yoursite.com/2019/02/16/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2019/02/16/测试文章/</id>
    <published>2019-02-16T15:29:26.000Z</published>
    <updated>2019-02-16T15:52:36.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试文章"><a href="#测试文章" class="headerlink" title="测试文章"></a>测试文章</h1><h2 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h2><h3 id="这是一个三级标题"><a href="#这是一个三级标题" class="headerlink" title="这是一个三级标题"></a>这是一个三级标题</h3><ul><li>列表1</li><li>列表2<br>  a 子列表1<br>  b 子列表</li><li>列表3</li></ul><hr><hr><hr><p><a href="https://www.zhihu.com/question/20727176" target="_blank" rel="noopener">有哪些值得推荐的字体？</a></p><p><img src="" alt="示例图片"></p><p><em>这是斜体字型</em><br><strong>这是粗体字型</strong></p><p><code>&lt;html&gt;&lt;/html&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这是一部分引用内容</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;测试文章&quot;&gt;&lt;a href=&quot;#测试文章&quot; class=&quot;headerlink&quot; title=&quot;测试文章&quot;&gt;&lt;/a&gt;测试文章&lt;/h1&gt;&lt;h2 id=&quot;第一篇文章&quot;&gt;&lt;a href=&quot;#第一篇文章&quot; class=&quot;headerlink&quot; title=&quot;第一篇文章&quot;&gt;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="分享" scheme="http://yoursite.com/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/02/13/hello-world/"/>
    <id>http://yoursite.com/2019/02/13/hello-world/</id>
    <published>2019-02-13T15:18:58.433Z</published>
    <updated>2019-02-16T13:21:47.382Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a h
      
    
    </summary>
    
    
  </entry>
  
</feed>
